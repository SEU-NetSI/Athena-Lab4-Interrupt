
Athena_Lab4_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080055a4  080055a4  000065a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  00007018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005678  08005678  00006678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005680  08005680  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005680  08005680  00006680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005684  08005684  00006684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005688  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019a4  20000018  080056a0  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019bc  080056a0  000079bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017708  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a6e  00000000  00000000  0001e750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  000221c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001244  00000000  00000000  000239a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002df78  00000000  00000000  00024be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019042  00000000  00000000  00052b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114738  00000000  00000000  0006bb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001802d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063dc  00000000  00000000  0018031c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001866f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000018 	.word	0x20000018
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800558c 	.word	0x0800558c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	0800558c 	.word	0x0800558c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	4013      	ands	r3, r2
 800021a:	041a      	lsls	r2, r3, #16
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	43d9      	mvns	r1, r3
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	400b      	ands	r3, r1
 8000224:	431a      	orrs	r2, r3
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	619a      	str	r2, [r3, #24]
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
	...

08000238 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  //======== Add Code in this area begin ========

  xUsartRxSemaphore = xSemaphoreCreateBinary();
 800023c:	2203      	movs	r2, #3
 800023e:	2100      	movs	r1, #0
 8000240:	2001      	movs	r0, #1
 8000242:	f002 fbba 	bl	80029ba <xQueueGenericCreate>
 8000246:	4603      	mov	r3, r0
 8000248:	4a09      	ldr	r2, [pc, #36]	@ (8000270 <MX_FREERTOS_Init+0x38>)
 800024a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800024c:	4a09      	ldr	r2, [pc, #36]	@ (8000274 <MX_FREERTOS_Init+0x3c>)
 800024e:	2100      	movs	r1, #0
 8000250:	4809      	ldr	r0, [pc, #36]	@ (8000278 <MX_FREERTOS_Init+0x40>)
 8000252:	f002 f935 	bl	80024c0 <osThreadNew>
 8000256:	4603      	mov	r3, r0
 8000258:	4a08      	ldr	r2, [pc, #32]	@ (800027c <MX_FREERTOS_Init+0x44>)
 800025a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  UsartTaskHandle = osThreadNew(UartParseTask, NULL, &UsartTaskHandle_attributes);
 800025c:	4a08      	ldr	r2, [pc, #32]	@ (8000280 <MX_FREERTOS_Init+0x48>)
 800025e:	2100      	movs	r1, #0
 8000260:	4808      	ldr	r0, [pc, #32]	@ (8000284 <MX_FREERTOS_Init+0x4c>)
 8000262:	f002 f92d 	bl	80024c0 <osThreadNew>
 8000266:	4603      	mov	r3, r0
 8000268:	4a07      	ldr	r2, [pc, #28]	@ (8000288 <MX_FREERTOS_Init+0x50>)
 800026a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000034 	.word	0x20000034
 8000274:	0800560c 	.word	0x0800560c
 8000278:	0800028d 	.word	0x0800028d
 800027c:	20000060 	.word	0x20000060
 8000280:	080055e8 	.word	0x080055e8
 8000284:	08000385 	.word	0x08000385
 8000288:	20000038 	.word	0x20000038

0800028c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	if(work_flag) {
 8000294:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <StartDefaultTask+0x28>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d004      	beq.n	80002a6 <StartDefaultTask+0x1a>
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_9);
 800029c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002a0:	4805      	ldr	r0, [pc, #20]	@ (80002b8 <StartDefaultTask+0x2c>)
 80002a2:	f7ff ffaf 	bl	8000204 <LL_GPIO_TogglePin>
	}
	osDelay(led_blink_timedelay);
 80002a6:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <StartDefaultTask+0x30>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 f99a 	bl	80025e4 <osDelay>
	if(work_flag) {
 80002b0:	e7f0      	b.n	8000294 <StartDefaultTask+0x8>
 80002b2:	bf00      	nop
 80002b4:	20000000 	.word	0x20000000
 80002b8:	48000400 	.word	0x48000400
 80002bc:	20000004 	.word	0x20000004

080002c0 <Usart_data_parse>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void Usart_data_parse(uint8_t *data, uint16_t len)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	807b      	strh	r3, [r7, #2]
  char* data_str = (char*)data;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	60fb      	str	r3, [r7, #12]
  if(strcmp(data_str, "STOP") == 0){
 80002d0:	4928      	ldr	r1, [pc, #160]	@ (8000374 <Usart_data_parse+0xb4>)
 80002d2:	68f8      	ldr	r0, [r7, #12]
 80002d4:	f7ff ff8c 	bl	80001f0 <strcmp>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d103      	bne.n	80002e6 <Usart_data_parse+0x26>
    work_flag = 0;
 80002de:	4b26      	ldr	r3, [pc, #152]	@ (8000378 <Usart_data_parse+0xb8>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
    return ;
 80002e4:	e043      	b.n	800036e <Usart_data_parse+0xae>
  }else if (strcmp(data_str, "START") == 0) {
 80002e6:	4925      	ldr	r1, [pc, #148]	@ (800037c <Usart_data_parse+0xbc>)
 80002e8:	68f8      	ldr	r0, [r7, #12]
 80002ea:	f7ff ff81 	bl	80001f0 <strcmp>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d103      	bne.n	80002fc <Usart_data_parse+0x3c>
    work_flag = 1;
 80002f4:	4b20      	ldr	r3, [pc, #128]	@ (8000378 <Usart_data_parse+0xb8>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
    return ;
 80002fa:	e038      	b.n	800036e <Usart_data_parse+0xae>
  }
  if(data_str[0] == 'D' && data_str[1] == ':') {
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b44      	cmp	r3, #68	@ 0x44
 8000302:	d134      	bne.n	800036e <Usart_data_parse+0xae>
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	3301      	adds	r3, #1
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b3a      	cmp	r3, #58	@ 0x3a
 800030c:	d12f      	bne.n	800036e <Usart_data_parse+0xae>
    uint32_t delay_value = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
    for(int i = 2; i < len; i++) {
 8000312:	2302      	movs	r3, #2
 8000314:	613b      	str	r3, [r7, #16]
 8000316:	e01d      	b.n	8000354 <Usart_data_parse+0x94>
      if(data_str[i] < '0' || data_str[i] > '9') {
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	4413      	add	r3, r2
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b2f      	cmp	r3, #47	@ 0x2f
 8000322:	d913      	bls.n	800034c <Usart_data_parse+0x8c>
 8000324:	693b      	ldr	r3, [r7, #16]
 8000326:	68fa      	ldr	r2, [r7, #12]
 8000328:	4413      	add	r3, r2
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b39      	cmp	r3, #57	@ 0x39
 800032e:	d80d      	bhi.n	800034c <Usart_data_parse+0x8c>
        continue; // Invalid character, continue
      }
      delay_value = delay_value * 10 + (data_str[i] - '0');
 8000330:	697a      	ldr	r2, [r7, #20]
 8000332:	4613      	mov	r3, r2
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	4413      	add	r3, r2
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	4619      	mov	r1, r3
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4413      	add	r3, r2
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	440b      	add	r3, r1
 8000346:	3b30      	subs	r3, #48	@ 0x30
 8000348:	617b      	str	r3, [r7, #20]
 800034a:	e000      	b.n	800034e <Usart_data_parse+0x8e>
        continue; // Invalid character, continue
 800034c:	bf00      	nop
    for(int i = 2; i < len; i++) {
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	3301      	adds	r3, #1
 8000352:	613b      	str	r3, [r7, #16]
 8000354:	887b      	ldrh	r3, [r7, #2]
 8000356:	693a      	ldr	r2, [r7, #16]
 8000358:	429a      	cmp	r2, r3
 800035a:	dbdd      	blt.n	8000318 <Usart_data_parse+0x58>
    }
    if(delay_value > 0){
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d005      	beq.n	800036e <Usart_data_parse+0xae>
      work_flag = 1;
 8000362:	4b05      	ldr	r3, [pc, #20]	@ (8000378 <Usart_data_parse+0xb8>)
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
      led_blink_timedelay = delay_value;
 8000368:	4a05      	ldr	r2, [pc, #20]	@ (8000380 <Usart_data_parse+0xc0>)
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	6013      	str	r3, [r2, #0]
    }
  }
}
 800036e:	3718      	adds	r7, #24
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	080055c0 	.word	0x080055c0
 8000378:	20000000 	.word	0x20000000
 800037c:	080055c8 	.word	0x080055c8
 8000380:	20000004 	.word	0x20000004

08000384 <UartParseTask>:

//======== Add Code in this area begin ========
void UartParseTask(void *argument)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  while (1) {
     if (xSemaphoreTake(xUsartRxSemaphore, portMAX_DELAY) == pdTRUE) {
 800038c:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <UartParseTask+0x40>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f04f 31ff 	mov.w	r1, #4294967295
 8000394:	4618      	mov	r0, r3
 8000396:	f002 fe81 	bl	800309c <xQueueSemaphoreTake>
 800039a:	4603      	mov	r3, r0
 800039c:	2b01      	cmp	r3, #1
 800039e:	d1f5      	bne.n	800038c <UartParseTask+0x8>
    	 Usart_data_parse(rx_buffer.data, rx_buffer.len);
 80003a0:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <UartParseTask+0x44>)
 80003a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80003a6:	4619      	mov	r1, r3
 80003a8:	4807      	ldr	r0, [pc, #28]	@ (80003c8 <UartParseTask+0x44>)
 80003aa:	f7ff ff89 	bl	80002c0 <Usart_data_parse>
    	 memset(rx_buffer.data, 0, sizeof(rx_buffer.data));
 80003ae:	2220      	movs	r2, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	4805      	ldr	r0, [pc, #20]	@ (80003c8 <UartParseTask+0x44>)
 80003b4:	f005 f8b0 	bl	8005518 <memset>
		 rx_buffer.len = 0;
 80003b8:	4b03      	ldr	r3, [pc, #12]	@ (80003c8 <UartParseTask+0x44>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	f883 2020 	strb.w	r2, [r3, #32]
     if (xSemaphoreTake(xUsartRxSemaphore, portMAX_DELAY) == pdTRUE) {
 80003c0:	e7e4      	b.n	800038c <UartParseTask+0x8>
 80003c2:	bf00      	nop
 80003c4:	20000034 	.word	0x20000034
 80003c8:	2000003c 	.word	0x2000003c

080003cc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003d4:	4b08      	ldr	r3, [pc, #32]	@ (80003f8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80003d8:	4907      	ldr	r1, [pc, #28]	@ (80003f8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4313      	orrs	r3, r2
 80003de:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003e0:	4b05      	ldr	r3, [pc, #20]	@ (80003f8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4013      	ands	r3, r2
 80003e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ea:	68fb      	ldr	r3, [r7, #12]
}
 80003ec:	bf00      	nop
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000

080003fc <LL_GPIO_ResetOutputPin>:
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	683a      	ldr	r2, [r7, #0]
 800040a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	463b      	mov	r3, r7
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
 800042a:	611a      	str	r2, [r3, #16]
 800042c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800042e:	2080      	movs	r0, #128	@ 0x80
 8000430:	f7ff ffcc 	bl	80003cc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000434:	2001      	movs	r0, #1
 8000436:	f7ff ffc9 	bl	80003cc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800043a:	2002      	movs	r0, #2
 800043c:	f7ff ffc6 	bl	80003cc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_9);
 8000440:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000444:	480b      	ldr	r0, [pc, #44]	@ (8000474 <MX_GPIO_Init+0x5c>)
 8000446:	f7ff ffd9 	bl	80003fc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800044a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800044e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000450:	2301      	movs	r3, #1
 8000452:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800045c:	2300      	movs	r3, #0
 800045e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000460:	463b      	mov	r3, r7
 8000462:	4619      	mov	r1, r3
 8000464:	4803      	ldr	r0, [pc, #12]	@ (8000474 <MX_GPIO_Init+0x5c>)
 8000466:	f001 fa74 	bl	8001952 <LL_GPIO_Init>

}
 800046a:	bf00      	nop
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	48000400 	.word	0x48000400

08000478 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800047c:	4b05      	ldr	r3, [pc, #20]	@ (8000494 <LL_RCC_HSE_Enable+0x1c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a04      	ldr	r2, [pc, #16]	@ (8000494 <LL_RCC_HSE_Enable+0x1c>)
 8000482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000486:	6013      	str	r3, [r2, #0]
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000

08000498 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 800049c:	4b07      	ldr	r3, [pc, #28]	@ (80004bc <LL_RCC_HSE_IsReady+0x24>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80004a8:	d101      	bne.n	80004ae <LL_RCC_HSE_IsReady+0x16>
 80004aa:	2301      	movs	r3, #1
 80004ac:	e000      	b.n	80004b0 <LL_RCC_HSE_IsReady+0x18>
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <LL_RCC_SetSysClkSource+0x24>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	f023 0203 	bic.w	r2, r3, #3
 80004d0:	4904      	ldr	r1, [pc, #16]	@ (80004e4 <LL_RCC_SetSysClkSource+0x24>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	608b      	str	r3, [r1, #8]
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	40021000 	.word	0x40021000

080004e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004ec:	4b04      	ldr	r3, [pc, #16]	@ (8000500 <LL_RCC_GetSysClkSource+0x18>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	f003 030c 	and.w	r3, r3, #12
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <LL_RCC_SetAHBPrescaler+0x24>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000514:	4904      	ldr	r1, [pc, #16]	@ (8000528 <LL_RCC_SetAHBPrescaler+0x24>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4313      	orrs	r3, r2
 800051a:	608b      	str	r3, [r1, #8]
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000

0800052c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800053c:	4904      	ldr	r1, [pc, #16]	@ (8000550 <LL_RCC_SetAPB1Prescaler+0x24>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4313      	orrs	r3, r2
 8000542:	608b      	str	r3, [r1, #8]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <LL_RCC_SetAPB2Prescaler+0x24>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000564:	4904      	ldr	r1, [pc, #16]	@ (8000578 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4313      	orrs	r3, r2
 800056a:	608b      	str	r3, [r1, #8]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000

0800057c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000580:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <LL_RCC_PLL_Enable+0x1c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a04      	ldr	r2, [pc, #16]	@ (8000598 <LL_RCC_PLL_Enable+0x1c>)
 8000586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800058a:	6013      	str	r3, [r2, #0]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <LL_RCC_PLL_IsReady+0x24>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80005ac:	d101      	bne.n	80005b2 <LL_RCC_PLL_IsReady+0x16>
 80005ae:	2301      	movs	r3, #1
 80005b0:	e000      	b.n	80005b4 <LL_RCC_PLL_IsReady+0x18>
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80005d4:	68da      	ldr	r2, [r3, #12]
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80005d8:	4013      	ands	r3, r2
 80005da:	68f9      	ldr	r1, [r7, #12]
 80005dc:	68ba      	ldr	r2, [r7, #8]
 80005de:	4311      	orrs	r1, r2
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	0212      	lsls	r2, r2, #8
 80005e4:	4311      	orrs	r1, r2
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	430a      	orrs	r2, r1
 80005ea:	4904      	ldr	r1, [pc, #16]	@ (80005fc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80005ec:	4313      	orrs	r3, r2
 80005ee:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	f9ff808c 	.word	0xf9ff808c

08000604 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800060e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <LL_FLASH_SetLatency+0x24>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f023 0207 	bic.w	r2, r3, #7
 8000634:	4904      	ldr	r1, [pc, #16]	@ (8000648 <LL_FLASH_SetLatency+0x24>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4313      	orrs	r3, r2
 800063a:	600b      	str	r3, [r1, #0]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	40022000 	.word	0x40022000

0800064c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <LL_FLASH_GetLatency+0x18>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f003 0307 	and.w	r3, r3, #7
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40022000 	.word	0x40022000

08000668 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000678:	4904      	ldr	r1, [pc, #16]	@ (800068c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4313      	orrs	r3, r2
 800067e:	600b      	str	r3, [r1, #0]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	40007000 	.word	0x40007000

08000690 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800069c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006a0:	d101      	bne.n	80006a6 <LL_PWR_IsActiveFlag_VOS+0x16>
 80006a2:	2301      	movs	r3, #1
 80006a4:	e000      	b.n	80006a8 <LL_PWR_IsActiveFlag_VOS+0x18>
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40007000 	.word	0x40007000

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fbd5 	bl	8000e6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f80c 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f7ff fea8 	bl	8000418 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006c8:	f000 fb3c 	bl	8000d44 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 80006cc:	f001 feae 	bl	800242c <osKernelInitialize>
  MX_FREERTOS_Init();
 80006d0:	f7ff fdb2 	bl	8000238 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006d4:	f001 fece 	bl	8002474 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <main+0x20>

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80006e0:	2004      	movs	r0, #4
 80006e2:	f7ff ff9f 	bl	8000624 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 80006e6:	bf00      	nop
 80006e8:	f7ff ffb0 	bl	800064c <LL_FLASH_GetLatency>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d1fa      	bne.n	80006e8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80006f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006f6:	f7ff ffb7 	bl	8000668 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 80006fa:	bf00      	nop
 80006fc:	f7ff ffc8 	bl	8000690 <LL_PWR_IsActiveFlag_VOS>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1fa      	bne.n	80006fc <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSE_Enable();
 8000706:	f7ff feb7 	bl	8000478 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800070a:	bf00      	nop
 800070c:	f7ff fec4 	bl	8000498 <LL_RCC_HSE_IsReady>
 8000710:	4603      	mov	r3, r0
 8000712:	2b01      	cmp	r3, #1
 8000714:	d1fa      	bne.n	800070c <SystemClock_Config+0x30>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 20, LL_RCC_PLLR_DIV_2);
 8000716:	2300      	movs	r3, #0
 8000718:	2214      	movs	r2, #20
 800071a:	2100      	movs	r1, #0
 800071c:	2003      	movs	r0, #3
 800071e:	f7ff ff51 	bl	80005c4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000722:	f7ff ff6f 	bl	8000604 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000726:	f7ff ff29 	bl	800057c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800072a:	bf00      	nop
 800072c:	f7ff ff36 	bl	800059c <LL_RCC_PLL_IsReady>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d1fa      	bne.n	800072c <SystemClock_Config+0x50>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000736:	2003      	movs	r0, #3
 8000738:	f7ff fec2 	bl	80004c0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800073c:	bf00      	nop
 800073e:	f7ff fed3 	bl	80004e8 <LL_RCC_GetSysClkSource>
 8000742:	4603      	mov	r3, r0
 8000744:	2b0c      	cmp	r3, #12
 8000746:	d1fa      	bne.n	800073e <SystemClock_Config+0x62>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000748:	2000      	movs	r0, #0
 800074a:	f7ff fedb 	bl	8000504 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff feec 	bl	800052c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000754:	2000      	movs	r0, #0
 8000756:	f7ff fefd 	bl	8000554 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 800075a:	4806      	ldr	r0, [pc, #24]	@ (8000774 <SystemClock_Config+0x98>)
 800075c:	f001 fe12 	bl	8002384 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000760:	200f      	movs	r0, #15
 8000762:	f000 f849 	bl	80007f8 <HAL_InitTick>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800076c:	f000 f816 	bl	800079c <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	04c4b400 	.word	0x04c4b400

08000778 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d101      	bne.n	800078e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800078a:	f000 fb87 	bl	8000e9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40012c00 	.word	0x40012c00

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <Error_Handler+0x8>

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b2:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ca:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	210f      	movs	r1, #15
 80007e2:	f06f 0001 	mvn.w	r0, #1
 80007e6:	f000 fc25 	bl	8001034 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	@ 0x30
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000800:	2300      	movs	r3, #0
 8000802:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000806:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <HAL_InitTick+0xc8>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800080a:	4a2d      	ldr	r2, [pc, #180]	@ (80008c0 <HAL_InitTick+0xc8>)
 800080c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000810:	6613      	str	r3, [r2, #96]	@ 0x60
 8000812:	4b2b      	ldr	r3, [pc, #172]	@ (80008c0 <HAL_InitTick+0xc8>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800081e:	f107 020c 	add.w	r2, r7, #12
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fc4f 	bl	80010cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800082e:	f000 fc37 	bl	80010a0 <HAL_RCC_GetPCLK2Freq>
 8000832:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000836:	4a23      	ldr	r2, [pc, #140]	@ (80008c4 <HAL_InitTick+0xcc>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	0c9b      	lsrs	r3, r3, #18
 800083e:	3b01      	subs	r3, #1
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <HAL_InitTick+0xd0>)
 8000844:	4a21      	ldr	r2, [pc, #132]	@ (80008cc <HAL_InitTick+0xd4>)
 8000846:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000848:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <HAL_InitTick+0xd0>)
 800084a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800084e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000850:	4a1d      	ldr	r2, [pc, #116]	@ (80008c8 <HAL_InitTick+0xd0>)
 8000852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000854:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000856:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <HAL_InitTick+0xd0>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <HAL_InitTick+0xd0>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <HAL_InitTick+0xd0>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000868:	4817      	ldr	r0, [pc, #92]	@ (80008c8 <HAL_InitTick+0xd0>)
 800086a:	f000 fc61 	bl	8001130 <HAL_TIM_Base_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000874:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000878:	2b00      	cmp	r3, #0
 800087a:	d11b      	bne.n	80008b4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800087c:	4812      	ldr	r0, [pc, #72]	@ (80008c8 <HAL_InitTick+0xd0>)
 800087e:	f000 fcb9 	bl	80011f4 <HAL_TIM_Base_Start_IT>
 8000882:	4603      	mov	r3, r0
 8000884:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000888:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800088c:	2b00      	cmp	r3, #0
 800088e:	d111      	bne.n	80008b4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000890:	2019      	movs	r0, #25
 8000892:	f000 fbeb 	bl	800106c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d808      	bhi.n	80008ae <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800089c:	2200      	movs	r2, #0
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	2019      	movs	r0, #25
 80008a2:	f000 fbc7 	bl	8001034 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <HAL_InitTick+0xd8>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	e002      	b.n	80008b4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3730      	adds	r7, #48	@ 0x30
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40021000 	.word	0x40021000
 80008c4:	431bde83 	.word	0x431bde83
 80008c8:	20000064 	.word	0x20000064
 80008cc:	40012c00 	.word	0x40012c00
 80008d0:	2000000c 	.word	0x2000000c

080008d4 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	2b10      	cmp	r3, #16
 80008e6:	d101      	bne.n	80008ec <LL_USART_IsActiveFlag_IDLE+0x18>
 80008e8:	2301      	movs	r3, #1
 80008ea:	e000      	b.n	80008ee <LL_USART_IsActiveFlag_IDLE+0x1a>
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f003 0320 	and.w	r3, r3, #32
 800090a:	2b20      	cmp	r3, #32
 800090c:	d101      	bne.n	8000912 <LL_USART_IsActiveFlag_RXNE+0x18>
 800090e:	2301      	movs	r3, #1
 8000910:	e000      	b.n	8000914 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000930:	2b80      	cmp	r3, #128	@ 0x80
 8000932:	d101      	bne.n	8000938 <LL_USART_IsActiveFlag_TXE+0x18>
 8000934:	2301      	movs	r3, #1
 8000936:	e000      	b.n	800093a <LL_USART_IsActiveFlag_TXE+0x1a>
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2210      	movs	r2, #16
 8000952:	621a      	str	r2, [r3, #32]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800096c:	b29b      	uxth	r3, r3
 800096e:	b2db      	uxtb	r3, r3
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	b29a      	uxth	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <NMI_Handler+0x4>

080009a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <MemManage_Handler+0x4>

080009b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009da:	f000 fc7b 	bl	80012d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000064 	.word	0x20000064

080009e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN USART1_IRQn 0 */
  if(LL_USART_IsActiveFlag_RXNE(USART1)) {
 80009f2:	4829      	ldr	r0, [pc, #164]	@ (8000a98 <USART1_IRQHandler+0xb0>)
 80009f4:	f7ff ff81 	bl	80008fa <LL_USART_IsActiveFlag_RXNE>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d01c      	beq.n	8000a38 <USART1_IRQHandler+0x50>
	  uint8_t receivedChar = LL_USART_ReceiveData8(USART1);
 80009fe:	4826      	ldr	r0, [pc, #152]	@ (8000a98 <USART1_IRQHandler+0xb0>)
 8000a00:	f7ff ffae 	bl	8000960 <LL_USART_ReceiveData8>
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
	  rx_buffer.data[rx_buffer.len++] = receivedChar;
 8000a08:	4b24      	ldr	r3, [pc, #144]	@ (8000a9c <USART1_IRQHandler+0xb4>)
 8000a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	b2d1      	uxtb	r1, r2
 8000a12:	4a22      	ldr	r2, [pc, #136]	@ (8000a9c <USART1_IRQHandler+0xb4>)
 8000a14:	f882 1020 	strb.w	r1, [r2, #32]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4a20      	ldr	r2, [pc, #128]	@ (8000a9c <USART1_IRQHandler+0xb4>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	5453      	strb	r3, [r2, r1]
	  while(!LL_USART_IsActiveFlag_TXE(USART1));
 8000a20:	bf00      	nop
 8000a22:	481d      	ldr	r0, [pc, #116]	@ (8000a98 <USART1_IRQHandler+0xb0>)
 8000a24:	f7ff ff7c 	bl	8000920 <LL_USART_IsActiveFlag_TXE>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f9      	beq.n	8000a22 <USART1_IRQHandler+0x3a>
	  LL_USART_TransmitData8(USART1, receivedChar);
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4619      	mov	r1, r3
 8000a32:	4819      	ldr	r0, [pc, #100]	@ (8000a98 <USART1_IRQHandler+0xb0>)
 8000a34:	f7ff ffa2 	bl	800097c <LL_USART_TransmitData8>
  }
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  //======== Add Code in this area begin ========
  if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 8000a38:	4817      	ldr	r0, [pc, #92]	@ (8000a98 <USART1_IRQHandler+0xb0>)
 8000a3a:	f7ff ff4b 	bl	80008d4 <LL_USART_IsActiveFlag_IDLE>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d019      	beq.n	8000a78 <USART1_IRQHandler+0x90>
	  LL_USART_ClearFlag_IDLE(USART1);
 8000a44:	4814      	ldr	r0, [pc, #80]	@ (8000a98 <USART1_IRQHandler+0xb0>)
 8000a46:	f7ff ff7e 	bl	8000946 <LL_USART_ClearFlag_IDLE>
	  rx_buffer.data[rx_buffer.len++] = '\0'; // Null-terminate the string
 8000a4a:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <USART1_IRQHandler+0xb4>)
 8000a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	b2d1      	uxtb	r1, r2
 8000a54:	4a11      	ldr	r2, [pc, #68]	@ (8000a9c <USART1_IRQHandler+0xb4>)
 8000a56:	f882 1020 	strb.w	r1, [r2, #32]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <USART1_IRQHandler+0xb4>)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	5499      	strb	r1, [r3, r2]
      if (xUsartRxSemaphore != NULL) {
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <USART1_IRQHandler+0xb8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d006      	beq.n	8000a78 <USART1_IRQHandler+0x90>
          xSemaphoreGiveFromISR(xUsartRxSemaphore, &xHigherPriorityTaskWoken);
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <USART1_IRQHandler+0xb8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	463a      	mov	r2, r7
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 f9a0 	bl	8002db8 <xQueueGiveFromISR>
      }
  }
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <USART1_IRQHandler+0xa6>
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <USART1_IRQHandler+0xbc>)
 8000a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	f3bf 8f4f 	dsb	sy
 8000a8a:	f3bf 8f6f 	isb	sy
  //======== Add Code in this area begin ========

  /* USER CODE END USART1_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	2000003c 	.word	0x2000003c
 8000aa0:	20000034 	.word	0x20000034
 8000aa4:	e000ed04 	.word	0xe000ed04

08000aa8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <SystemInit+0x20>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab2:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <SystemInit+0x20>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	@ (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	@ (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	@ (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	@ 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	@ 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <LL_RCC_SetUSARTClockSource>:
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <LL_RCC_SetUSARTClockSource+0x30>)
 8000bea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	0c1b      	lsrs	r3, r3, #16
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	4905      	ldr	r1, [pc, #20]	@ (8000c10 <LL_RCC_SetUSARTClockSource+0x30>)
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <LL_AHB2_GRP1_EnableClock>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c20:	4907      	ldr	r1, [pc, #28]	@ (8000c40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	40021000 	.word	0x40021000

08000c44 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c4e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c50:	4907      	ldr	r1, [pc, #28]	@ (8000c70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c5a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	40021000 	.word	0x40021000

08000c74 <LL_USART_Enable>:
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f043 0201 	orr.w	r2, r3, #1
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <LL_USART_ConfigAsyncMode>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_USART_EnableIT_IDLE>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	@ 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	e853 3f00 	ldrex	r3, [r3]
 8000cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	61ba      	str	r2, [r7, #24]
 8000ce2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ce4:	6979      	ldr	r1, [r7, #20]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	e841 2300 	strex	r3, r2, [r1]
 8000cec:	613b      	str	r3, [r7, #16]
   return(result);
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1e9      	bne.n	8000cc8 <LL_USART_EnableIT_IDLE+0x8>
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3724      	adds	r7, #36	@ 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <LL_USART_EnableIT_RXNE>:
{
 8000d02:	b480      	push	{r7}
 8000d04:	b089      	sub	sp, #36	@ 0x24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	e853 3f00 	ldrex	r3, [r3]
 8000d14:	60bb      	str	r3, [r7, #8]
   return(result);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	f043 0320 	orr.w	r3, r3, #32
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69fa      	ldr	r2, [r7, #28]
 8000d22:	61ba      	str	r2, [r7, #24]
 8000d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d26:	6979      	ldr	r1, [r7, #20]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	e841 2300 	strex	r3, r2, [r1]
 8000d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1e9      	bne.n	8000d0a <LL_USART_EnableIT_RXNE+0x8>
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	3724      	adds	r7, #36	@ 0x24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	@ 0x38
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]
 8000d5a:	615a      	str	r2, [r3, #20]
 8000d5c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8000d6e:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000d72:	f7ff ff35 	bl	8000be0 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000d76:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d7a:	f7ff ff63 	bl	8000c44 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f7ff ff48 	bl	8000c14 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000d84:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da6:	f000 fdd4 	bl	8001952 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000daa:	f7ff fe8f 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2200      	movs	r2, #0
 8000db2:	2105      	movs	r1, #5
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fedf 	bl	8000b78 <NVIC_EncodePriority>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	2025      	movs	r0, #37	@ 0x25
 8000dc0:	f7ff feb0 	bl	8000b24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000dc4:	2025      	movs	r0, #37	@ 0x25
 8000dc6:	f7ff fe8f 	bl	8000ae8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000dca:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000dce:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ddc:	230c      	movs	r3, #12
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000de4:	2300      	movs	r3, #0
 8000de6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	4809      	ldr	r0, [pc, #36]	@ (8000e14 <MX_USART1_UART_Init+0xd0>)
 8000df0:	f001 fa4c 	bl	800228c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000df4:	4807      	ldr	r0, [pc, #28]	@ (8000e14 <MX_USART1_UART_Init+0xd0>)
 8000df6:	f7ff ff4d 	bl	8000c94 <LL_USART_ConfigAsyncMode>
  // Add enable USART1 RX interrupt and IDLE interrupt
  LL_USART_EnableIT_RXNE(USART1);
 8000dfa:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <MX_USART1_UART_Init+0xd0>)
 8000dfc:	f7ff ff81 	bl	8000d02 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_IDLE(USART1);
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <MX_USART1_UART_Init+0xd0>)
 8000e02:	f7ff ff5d 	bl	8000cc0 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART1);
 8000e06:	4803      	ldr	r0, [pc, #12]	@ (8000e14 <MX_USART1_UART_Init+0xd0>)
 8000e08:	f7ff ff34 	bl	8000c74 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3738      	adds	r7, #56	@ 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40013800 	.word	0x40013800

08000e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e1c:	f7ff fe44 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	@ (8000e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <LoopForever+0xe>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	@ (8000e64 <LoopForever+0x16>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f004 fb6f 	bl	8005528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e4a:	f7ff fc35 	bl	80006b8 <main>

08000e4e <LoopForever>:

LoopForever:
    b LoopForever
 8000e4e:	e7fe      	b.n	8000e4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e50:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e5c:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 8000e60:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e64:	200019bc 	.word	0x200019bc

08000e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_2_IRQHandler>

08000e6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f8d2 	bl	800101e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e7a:	200f      	movs	r0, #15
 8000e7c:	f7ff fcbc 	bl	80007f8 <HAL_InitTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	e001      	b.n	8000e90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e8c:	f7ff fc8c 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e90:	79fb      	ldrb	r3, [r7, #7]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000010 	.word	0x20000010
 8000ec0:	200000b0 	.word	0x200000b0

08000ec4 <__NVIC_SetPriorityGrouping>:
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	@ (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	@ (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	@ (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	@ 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff4c 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001046:	f7ff ff61 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 800104a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	6978      	ldr	r0, [r7, #20]
 8001052:	f7ff ffb1 	bl	8000fb8 <NVIC_EncodePriority>
 8001056:	4602      	mov	r2, r0
 8001058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff80 	bl	8000f64 <__NVIC_SetPriority>
}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff54 	bl	8000f28 <__NVIC_EnableIRQ>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <HAL_RCC_GetHCLKFreq+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008

080010a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80010a4:	f7ff fff0 	bl	8001088 <HAL_RCC_GetHCLKFreq>
 80010a8:	4602      	mov	r2, r0
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	0adb      	lsrs	r3, r3, #11
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	4904      	ldr	r1, [pc, #16]	@ (80010c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80010b6:	5ccb      	ldrb	r3, [r1, r3]
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000
 80010c8:	08005640 	.word	0x08005640

080010cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	220f      	movs	r2, #15
 80010da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <HAL_RCC_GetClockConfig+0x5c>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 0203 	and.w	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <HAL_RCC_GetClockConfig+0x5c>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <HAL_RCC_GetClockConfig+0x5c>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001100:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <HAL_RCC_GetClockConfig+0x5c>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <HAL_RCC_GetClockConfig+0x60>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0207 	and.w	r2, r3, #7
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	601a      	str	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	40022000 	.word	0x40022000

08001130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e049      	b.n	80011d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d106      	bne.n	800115c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f841 	bl	80011de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2202      	movs	r2, #2
 8001160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3304      	adds	r3, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f000 f9e0 	bl	8001534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d001      	beq.n	800120c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e04f      	b.n	80012ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2202      	movs	r2, #2
 8001210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a23      	ldr	r2, [pc, #140]	@ (80012b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d01d      	beq.n	800126a <HAL_TIM_Base_Start_IT+0x76>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001236:	d018      	beq.n	800126a <HAL_TIM_Base_Start_IT+0x76>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1f      	ldr	r2, [pc, #124]	@ (80012bc <HAL_TIM_Base_Start_IT+0xc8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_TIM_Base_Start_IT+0x76>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a1e      	ldr	r2, [pc, #120]	@ (80012c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d00e      	beq.n	800126a <HAL_TIM_Base_Start_IT+0x76>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d009      	beq.n	800126a <HAL_TIM_Base_Start_IT+0x76>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a1b      	ldr	r2, [pc, #108]	@ (80012c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d004      	beq.n	800126a <HAL_TIM_Base_Start_IT+0x76>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a19      	ldr	r2, [pc, #100]	@ (80012cc <HAL_TIM_Base_Start_IT+0xd8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d115      	bne.n	8001296 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001272:	4013      	ands	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2b06      	cmp	r3, #6
 800127a:	d015      	beq.n	80012a8 <HAL_TIM_Base_Start_IT+0xb4>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001282:	d011      	beq.n	80012a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001294:	e008      	b.n	80012a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0201 	orr.w	r2, r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e000      	b.n	80012aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40012c00 	.word	0x40012c00
 80012bc:	40000400 	.word	0x40000400
 80012c0:	40000800 	.word	0x40000800
 80012c4:	40000c00 	.word	0x40000c00
 80012c8:	40013400 	.word	0x40013400
 80012cc:	40014000 	.word	0x40014000
 80012d0:	00010007 	.word	0x00010007

080012d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d020      	beq.n	8001338 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01b      	beq.n	8001338 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f06f 0202 	mvn.w	r2, #2
 8001308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f8e9 	bl	80014f6 <HAL_TIM_IC_CaptureCallback>
 8001324:	e005      	b.n	8001332 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f8db 	bl	80014e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f8ec 	bl	800150a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b00      	cmp	r3, #0
 8001340:	d020      	beq.n	8001384 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	d01b      	beq.n	8001384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f06f 0204 	mvn.w	r2, #4
 8001354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2202      	movs	r2, #2
 800135a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f8c3 	bl	80014f6 <HAL_TIM_IC_CaptureCallback>
 8001370:	e005      	b.n	800137e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f8b5 	bl	80014e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f8c6 	bl	800150a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d020      	beq.n	80013d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01b      	beq.n	80013d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f06f 0208 	mvn.w	r2, #8
 80013a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2204      	movs	r2, #4
 80013a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f89d 	bl	80014f6 <HAL_TIM_IC_CaptureCallback>
 80013bc:	e005      	b.n	80013ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f88f 	bl	80014e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f8a0 	bl	800150a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d020      	beq.n	800141c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d01b      	beq.n	800141c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f06f 0210 	mvn.w	r2, #16
 80013ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2208      	movs	r2, #8
 80013f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f877 	bl	80014f6 <HAL_TIM_IC_CaptureCallback>
 8001408:	e005      	b.n	8001416 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f869 	bl	80014e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f87a 	bl	800150a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00c      	beq.n	8001440 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f06f 0201 	mvn.w	r2, #1
 8001438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff f99c 	bl	8000778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001446:	2b00      	cmp	r3, #0
 8001448:	d104      	bne.n	8001454 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00c      	beq.n	800146e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f913 	bl	8001694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800148a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f90b 	bl	80016a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00c      	beq.n	80014b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80014ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f834 	bl	800151e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f003 0320 	and.w	r3, r3, #32
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00c      	beq.n	80014da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0320 	and.w	r3, r3, #32
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f06f 0220 	mvn.w	r2, #32
 80014d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f8d3 	bl	8001680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a46      	ldr	r2, [pc, #280]	@ (8001660 <TIM_Base_SetConfig+0x12c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d013      	beq.n	8001574 <TIM_Base_SetConfig+0x40>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001552:	d00f      	beq.n	8001574 <TIM_Base_SetConfig+0x40>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a43      	ldr	r2, [pc, #268]	@ (8001664 <TIM_Base_SetConfig+0x130>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d00b      	beq.n	8001574 <TIM_Base_SetConfig+0x40>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a42      	ldr	r2, [pc, #264]	@ (8001668 <TIM_Base_SetConfig+0x134>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d007      	beq.n	8001574 <TIM_Base_SetConfig+0x40>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a41      	ldr	r2, [pc, #260]	@ (800166c <TIM_Base_SetConfig+0x138>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d003      	beq.n	8001574 <TIM_Base_SetConfig+0x40>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a40      	ldr	r2, [pc, #256]	@ (8001670 <TIM_Base_SetConfig+0x13c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d108      	bne.n	8001586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800157a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a35      	ldr	r2, [pc, #212]	@ (8001660 <TIM_Base_SetConfig+0x12c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d01f      	beq.n	80015ce <TIM_Base_SetConfig+0x9a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001594:	d01b      	beq.n	80015ce <TIM_Base_SetConfig+0x9a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a32      	ldr	r2, [pc, #200]	@ (8001664 <TIM_Base_SetConfig+0x130>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d017      	beq.n	80015ce <TIM_Base_SetConfig+0x9a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a31      	ldr	r2, [pc, #196]	@ (8001668 <TIM_Base_SetConfig+0x134>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <TIM_Base_SetConfig+0x9a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a30      	ldr	r2, [pc, #192]	@ (800166c <TIM_Base_SetConfig+0x138>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00f      	beq.n	80015ce <TIM_Base_SetConfig+0x9a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001670 <TIM_Base_SetConfig+0x13c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00b      	beq.n	80015ce <TIM_Base_SetConfig+0x9a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001674 <TIM_Base_SetConfig+0x140>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <TIM_Base_SetConfig+0x9a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001678 <TIM_Base_SetConfig+0x144>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d003      	beq.n	80015ce <TIM_Base_SetConfig+0x9a>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a2c      	ldr	r2, [pc, #176]	@ (800167c <TIM_Base_SetConfig+0x148>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d108      	bne.n	80015e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a16      	ldr	r2, [pc, #88]	@ (8001660 <TIM_Base_SetConfig+0x12c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d00f      	beq.n	800162c <TIM_Base_SetConfig+0xf8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a18      	ldr	r2, [pc, #96]	@ (8001670 <TIM_Base_SetConfig+0x13c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d00b      	beq.n	800162c <TIM_Base_SetConfig+0xf8>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a17      	ldr	r2, [pc, #92]	@ (8001674 <TIM_Base_SetConfig+0x140>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d007      	beq.n	800162c <TIM_Base_SetConfig+0xf8>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a16      	ldr	r2, [pc, #88]	@ (8001678 <TIM_Base_SetConfig+0x144>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d003      	beq.n	800162c <TIM_Base_SetConfig+0xf8>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a15      	ldr	r2, [pc, #84]	@ (800167c <TIM_Base_SetConfig+0x148>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d103      	bne.n	8001634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b01      	cmp	r3, #1
 8001644:	d105      	bne.n	8001652 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f023 0201 	bic.w	r2, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	611a      	str	r2, [r3, #16]
  }
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40012c00 	.word	0x40012c00
 8001664:	40000400 	.word	0x40000400
 8001668:	40000800 	.word	0x40000800
 800166c:	40000c00 	.word	0x40000c00
 8001670:	40013400 	.word	0x40013400
 8001674:	40014000 	.word	0x40014000
 8001678:	40014400 	.word	0x40014400
 800167c:	40014800 	.word	0x40014800

08001680 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_GPIO_SetPinMode>:
{
 80016bc:	b480      	push	{r7}
 80016be:	b08b      	sub	sp, #44	@ 0x2c
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	613b      	str	r3, [r7, #16]
  return result;
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80016e2:	2320      	movs	r3, #32
 80016e4:	e003      	b.n	80016ee <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2103      	movs	r1, #3
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	401a      	ands	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	61fb      	str	r3, [r7, #28]
  return result;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001710:	2320      	movs	r3, #32
 8001712:	e003      	b.n	800171c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	431a      	orrs	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	601a      	str	r2, [r3, #0]
}
 800172a:	bf00      	nop
 800172c:	372c      	adds	r7, #44	@ 0x2c
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_GPIO_SetPinOutputType>:
{
 8001736:	b480      	push	{r7}
 8001738:	b085      	sub	sp, #20
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	43db      	mvns	r3, r3
 800174a:	401a      	ands	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	431a      	orrs	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	605a      	str	r2, [r3, #4]
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_GPIO_SetPinSpeed>:
{
 8001766:	b480      	push	{r7}
 8001768:	b08b      	sub	sp, #44	@ 0x2c
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	613b      	str	r3, [r7, #16]
  return result;
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800178c:	2320      	movs	r3, #32
 800178e:	e003      	b.n	8001798 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2103      	movs	r1, #3
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	61fb      	str	r3, [r7, #28]
  return result;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80017ba:	2320      	movs	r3, #32
 80017bc:	e003      	b.n	80017c6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	fab3 f383 	clz	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	431a      	orrs	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	609a      	str	r2, [r3, #8]
}
 80017d4:	bf00      	nop
 80017d6:	372c      	adds	r7, #44	@ 0x2c
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_GPIO_SetPinPull>:
{
 80017e0:	b480      	push	{r7}
 80017e2:	b08b      	sub	sp, #44	@ 0x2c
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	613b      	str	r3, [r7, #16]
  return result;
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001806:	2320      	movs	r3, #32
 8001808:	e003      	b.n	8001812 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2103      	movs	r1, #3
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	401a      	ands	r2, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	61fb      	str	r3, [r7, #28]
  return result;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001834:	2320      	movs	r3, #32
 8001836:	e003      	b.n	8001840 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	431a      	orrs	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	60da      	str	r2, [r3, #12]
}
 800184e:	bf00      	nop
 8001850:	372c      	adds	r7, #44	@ 0x2c
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_GPIO_SetAFPin_0_7>:
{
 800185a:	b480      	push	{r7}
 800185c:	b08b      	sub	sp, #44	@ 0x2c
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a1a      	ldr	r2, [r3, #32]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	613b      	str	r3, [r7, #16]
  return result;
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001880:	2320      	movs	r3, #32
 8001882:	e003      	b.n	800188c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	210f      	movs	r1, #15
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	401a      	ands	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	61fb      	str	r3, [r7, #28]
  return result;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80018ae:	2320      	movs	r3, #32
 80018b0:	e003      	b.n	80018ba <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	431a      	orrs	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	621a      	str	r2, [r3, #32]
}
 80018c8:	bf00      	nop
 80018ca:	372c      	adds	r7, #44	@ 0x2c
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_GPIO_SetAFPin_8_15>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	b08b      	sub	sp, #44	@ 0x2c
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	613b      	str	r3, [r7, #16]
  return result;
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80018fc:	2320      	movs	r3, #32
 80018fe:	e003      	b.n	8001908 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	210f      	movs	r1, #15
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	401a      	ands	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	61fb      	str	r3, [r7, #28]
  return result;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800192c:	2320      	movs	r3, #32
 800192e:	e003      	b.n	8001938 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001946:	bf00      	nop
 8001948:	372c      	adds	r7, #44	@ 0x2c
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b088      	sub	sp, #32
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	60fb      	str	r3, [r7, #12]
  return result;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <LL_GPIO_Init+0x26>
    return 32U;
 8001974:	2320      	movs	r3, #32
 8001976:	e003      	b.n	8001980 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001982:	e048      	b.n	8001a16 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d03a      	beq.n	8001a10 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d003      	beq.n	80019aa <LL_GPIO_Init+0x58>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d10e      	bne.n	80019c8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	461a      	mov	r2, r3
 80019b0:	69b9      	ldr	r1, [r7, #24]
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fed7 	bl	8001766 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6819      	ldr	r1, [r3, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	461a      	mov	r2, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff feb7 	bl	8001736 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	461a      	mov	r2, r3
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff05 	bl	80017e0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d111      	bne.n	8001a02 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2bff      	cmp	r3, #255	@ 0xff
 80019e2:	d807      	bhi.n	80019f4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	461a      	mov	r2, r3
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff34 	bl	800185a <LL_GPIO_SetAFPin_0_7>
 80019f2:	e006      	b.n	8001a02 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	461a      	mov	r2, r3
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff69 	bl	80018d4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	69b9      	ldr	r1, [r7, #24]
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fe56 	bl	80016bc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	3301      	adds	r3, #1
 8001a14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1af      	bne.n	8001984 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3720      	adds	r7, #32
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <LL_RCC_HSI_IsReady>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001a34:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <LL_RCC_HSI_IsReady+0x24>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a40:	d101      	bne.n	8001a46 <LL_RCC_HSI_IsReady+0x16>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_RCC_HSI_IsReady+0x18>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000

08001a58 <LL_RCC_LSE_IsReady>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <LL_RCC_LSE_IsReady+0x24>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d101      	bne.n	8001a6e <LL_RCC_LSE_IsReady+0x16>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <LL_RCC_LSE_IsReady+0x18>
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000

08001a80 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d101      	bne.n	8001a94 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <LL_RCC_MSI_GetRange>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <LL_RCC_MSI_GetRange+0x18>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000

08001ac0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aca:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40021000 	.word	0x40021000

08001adc <LL_RCC_GetSysClkSource>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <LL_RCC_GetSysClkSource+0x18>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000

08001af8 <LL_RCC_GetAHBPrescaler>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001afc:	4b04      	ldr	r3, [pc, #16]	@ (8001b10 <LL_RCC_GetAHBPrescaler+0x18>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000

08001b14 <LL_RCC_GetAPB1Prescaler>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b18:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <LL_RCC_GetAPB1Prescaler+0x18>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000

08001b30 <LL_RCC_GetAPB2Prescaler>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000

08001b4c <LL_RCC_GetUSARTClockSource>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <LL_RCC_GetUSARTClockSource+0x24>)
 8001b56:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	4313      	orrs	r3, r2
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40021000 	.word	0x40021000

08001b74 <LL_RCC_GetUARTClockSource>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <LL_RCC_GetUARTClockSource+0x24>)
 8001b7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	4313      	orrs	r3, r2
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	40021000 	.word	0x40021000

08001b9c <LL_RCC_PLL_GetMainSource>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <LL_RCC_PLL_GetMainSource+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <LL_RCC_PLL_GetN>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <LL_RCC_PLL_GetN+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <LL_RCC_PLL_GetR>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <LL_RCC_PLL_GetR+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000

08001bf0 <LL_RCC_PLL_GetDivider>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <LL_RCC_PLL_GetDivider+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000

08001c0c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d137      	bne.n	8001c8e <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ff94 	bl	8001b4c <LL_RCC_GetUSARTClockSource>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	f200 80b3 	bhi.w	8001d96 <LL_RCC_GetUSARTClockFreq+0x18a>
 8001c30:	a201      	add	r2, pc, #4	@ (adr r2, 8001c38 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8001c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c36:	bf00      	nop
 8001c38:	08001c77 	.word	0x08001c77
 8001c3c:	08001c49 	.word	0x08001c49
 8001c40:	08001c51 	.word	0x08001c51
 8001c44:	08001c63 	.word	0x08001c63
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001c48:	f000 f956 	bl	8001ef8 <RCC_GetSystemClockFreq>
 8001c4c:	60f8      	str	r0, [r7, #12]
        break;
 8001c4e:	e0b3      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001c50:	f7ff feee 	bl	8001a30 <LL_RCC_HSI_IsReady>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 809f 	beq.w	8001d9a <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8001c5c:	4b59      	ldr	r3, [pc, #356]	@ (8001dc4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001c5e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c60:	e09b      	b.n	8001d9a <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001c62:	f7ff fef9 	bl	8001a58 <LL_RCC_LSE_IsReady>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8098 	beq.w	8001d9e <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8001c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c72:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c74:	e093      	b.n	8001d9e <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001c76:	f000 f93f 	bl	8001ef8 <RCC_GetSystemClockFreq>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f9cb 	bl	8002018 <RCC_GetHCLKClockFreq>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f9f1 	bl	800206c <RCC_GetPCLK2ClockFreq>
 8001c8a:	60f8      	str	r0, [r7, #12]
        break;
 8001c8c:	e094      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0c      	cmp	r3, #12
 8001c92:	d146      	bne.n	8001d22 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff59 	bl	8001b4c <LL_RCC_GetUSARTClockSource>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d87e      	bhi.n	8001da2 <LL_RCC_GetUSARTClockFreq+0x196>
 8001ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cac <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001d0b 	.word	0x08001d0b
 8001cb0:	08001da3 	.word	0x08001da3
 8001cb4:	08001da3 	.word	0x08001da3
 8001cb8:	08001da3 	.word	0x08001da3
 8001cbc:	08001ce1 	.word	0x08001ce1
 8001cc0:	08001da3 	.word	0x08001da3
 8001cc4:	08001da3 	.word	0x08001da3
 8001cc8:	08001da3 	.word	0x08001da3
 8001ccc:	08001ce9 	.word	0x08001ce9
 8001cd0:	08001da3 	.word	0x08001da3
 8001cd4:	08001da3 	.word	0x08001da3
 8001cd8:	08001da3 	.word	0x08001da3
 8001cdc:	08001cf9 	.word	0x08001cf9
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001ce0:	f000 f90a 	bl	8001ef8 <RCC_GetSystemClockFreq>
 8001ce4:	60f8      	str	r0, [r7, #12]
        break;
 8001ce6:	e067      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001ce8:	f7ff fea2 	bl	8001a30 <LL_RCC_HSI_IsReady>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d059      	beq.n	8001da6 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8001cf2:	4b34      	ldr	r3, [pc, #208]	@ (8001dc4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001cf4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001cf6:	e056      	b.n	8001da6 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001cf8:	f7ff feae 	bl	8001a58 <LL_RCC_LSE_IsReady>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d053      	beq.n	8001daa <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8001d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d06:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001d08:	e04f      	b.n	8001daa <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001d0a:	f000 f8f5 	bl	8001ef8 <RCC_GetSystemClockFreq>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 f981 	bl	8002018 <RCC_GetHCLKClockFreq>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f993 	bl	8002044 <RCC_GetPCLK1ClockFreq>
 8001d1e:	60f8      	str	r0, [r7, #12]
        break;
 8001d20:	e04a      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b30      	cmp	r3, #48	@ 0x30
 8001d26:	d147      	bne.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff0f 	bl	8001b4c <LL_RCC_GetUSARTClockSource>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8001d34:	d01a      	beq.n	8001d6c <LL_RCC_GetUSARTClockFreq+0x160>
 8001d36:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8001d3a:	d838      	bhi.n	8001dae <LL_RCC_GetUSARTClockFreq+0x1a2>
 8001d3c:	4a22      	ldr	r2, [pc, #136]	@ (8001dc8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00c      	beq.n	8001d5c <LL_RCC_GetUSARTClockFreq+0x150>
 8001d42:	4a21      	ldr	r2, [pc, #132]	@ (8001dc8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d832      	bhi.n	8001dae <LL_RCC_GetUSARTClockFreq+0x1a2>
 8001d48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001d4c:	d017      	beq.n	8001d7e <LL_RCC_GetUSARTClockFreq+0x172>
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dcc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d12c      	bne.n	8001dae <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8001d54:	f000 f8d0 	bl	8001ef8 <RCC_GetSystemClockFreq>
 8001d58:	60f8      	str	r0, [r7, #12]
          break;
 8001d5a:	e02d      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8001d5c:	f7ff fe68 	bl	8001a30 <LL_RCC_HSI_IsReady>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d025      	beq.n	8001db2 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 8001d66:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001d68:	60fb      	str	r3, [r7, #12]
          }
          break;
 8001d6a:	e022      	b.n	8001db2 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8001d6c:	f7ff fe74 	bl	8001a58 <LL_RCC_LSE_IsReady>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01f      	beq.n	8001db6 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8001d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d7a:	60fb      	str	r3, [r7, #12]
          }
          break;
 8001d7c:	e01b      	b.n	8001db6 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001d7e:	f000 f8bb 	bl	8001ef8 <RCC_GetSystemClockFreq>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f947 	bl	8002018 <RCC_GetHCLKClockFreq>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f959 	bl	8002044 <RCC_GetPCLK1ClockFreq>
 8001d92:	60f8      	str	r0, [r7, #12]
          break;
 8001d94:	e010      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001d96:	bf00      	nop
 8001d98:	e00e      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001d9a:	bf00      	nop
 8001d9c:	e00c      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001d9e:	bf00      	nop
 8001da0:	e00a      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001da2:	bf00      	nop
 8001da4:	e008      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001da6:	bf00      	nop
 8001da8:	e006      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001daa:	bf00      	nop
 8001dac:	e004      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8001dae:	bf00      	nop
 8001db0:	e002      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8001db2:	bf00      	nop
 8001db4:	e000      	b.n	8001db8 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8001db6:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8001db8:	68fb      	ldr	r3, [r7, #12]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	00f42400 	.word	0x00f42400
 8001dc8:	00300020 	.word	0x00300020
 8001dcc:	00300010 	.word	0x00300010

08001dd0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2bc0      	cmp	r3, #192	@ 0xc0
 8001de0:	d13b      	bne.n	8001e5a <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fec6 	bl	8001b74 <LL_RCC_GetUARTClockSource>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8001dee:	d01a      	beq.n	8001e26 <LL_RCC_GetUARTClockFreq+0x56>
 8001df0:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8001df4:	d82c      	bhi.n	8001e50 <LL_RCC_GetUARTClockFreq+0x80>
 8001df6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ee4 <LL_RCC_GetUARTClockFreq+0x114>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00c      	beq.n	8001e16 <LL_RCC_GetUARTClockFreq+0x46>
 8001dfc:	4a39      	ldr	r2, [pc, #228]	@ (8001ee4 <LL_RCC_GetUARTClockFreq+0x114>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d826      	bhi.n	8001e50 <LL_RCC_GetUARTClockFreq+0x80>
 8001e02:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e06:	d017      	beq.n	8001e38 <LL_RCC_GetUARTClockFreq+0x68>
 8001e08:	4a37      	ldr	r2, [pc, #220]	@ (8001ee8 <LL_RCC_GetUARTClockFreq+0x118>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d120      	bne.n	8001e50 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8001e0e:	f000 f873 	bl	8001ef8 <RCC_GetSystemClockFreq>
 8001e12:	60f8      	str	r0, [r7, #12]
        break;
 8001e14:	e021      	b.n	8001e5a <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001e16:	f7ff fe0b 	bl	8001a30 <LL_RCC_HSI_IsReady>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d019      	beq.n	8001e54 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 8001e20:	4b32      	ldr	r3, [pc, #200]	@ (8001eec <LL_RCC_GetUARTClockFreq+0x11c>)
 8001e22:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e24:	e016      	b.n	8001e54 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001e26:	f7ff fe17 	bl	8001a58 <LL_RCC_LSE_IsReady>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d013      	beq.n	8001e58 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 8001e30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e34:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e36:	e00f      	b.n	8001e58 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001e38:	f000 f85e 	bl	8001ef8 <RCC_GetSystemClockFreq>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f8ea 	bl	8002018 <RCC_GetHCLKClockFreq>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f8fc 	bl	8002044 <RCC_GetPCLK1ClockFreq>
 8001e4c:	60f8      	str	r0, [r7, #12]
        break;
 8001e4e:	e004      	b.n	8001e5a <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 8001e50:	bf00      	nop
 8001e52:	e002      	b.n	8001e5a <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8001e54:	bf00      	nop
 8001e56:	e000      	b.n	8001e5a <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8001e58:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e60:	d13b      	bne.n	8001eda <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fe86 	bl	8001b74 <LL_RCC_GetUARTClockSource>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8001e6e:	d01a      	beq.n	8001ea6 <LL_RCC_GetUARTClockFreq+0xd6>
 8001e70:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8001e74:	d82c      	bhi.n	8001ed0 <LL_RCC_GetUARTClockFreq+0x100>
 8001e76:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef0 <LL_RCC_GetUARTClockFreq+0x120>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00c      	beq.n	8001e96 <LL_RCC_GetUARTClockFreq+0xc6>
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef0 <LL_RCC_GetUARTClockFreq+0x120>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d826      	bhi.n	8001ed0 <LL_RCC_GetUARTClockFreq+0x100>
 8001e82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e86:	d017      	beq.n	8001eb8 <LL_RCC_GetUARTClockFreq+0xe8>
 8001e88:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef4 <LL_RCC_GetUARTClockFreq+0x124>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d120      	bne.n	8001ed0 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8001e8e:	f000 f833 	bl	8001ef8 <RCC_GetSystemClockFreq>
 8001e92:	60f8      	str	r0, [r7, #12]
        break;
 8001e94:	e021      	b.n	8001eda <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001e96:	f7ff fdcb 	bl	8001a30 <LL_RCC_HSI_IsReady>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d019      	beq.n	8001ed4 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <LL_RCC_GetUARTClockFreq+0x11c>)
 8001ea2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001ea4:	e016      	b.n	8001ed4 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001ea6:	f7ff fdd7 	bl	8001a58 <LL_RCC_LSE_IsReady>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 8001eb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001eb4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001eb6:	e00f      	b.n	8001ed8 <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001eb8:	f000 f81e 	bl	8001ef8 <RCC_GetSystemClockFreq>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f8aa 	bl	8002018 <RCC_GetHCLKClockFreq>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f8bc 	bl	8002044 <RCC_GetPCLK1ClockFreq>
 8001ecc:	60f8      	str	r0, [r7, #12]
        break;
 8001ece:	e004      	b.n	8001eda <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 8001ed0:	bf00      	nop
 8001ed2:	e002      	b.n	8001eda <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8001ed4:	bf00      	nop
 8001ed6:	e000      	b.n	8001eda <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8001ed8:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	00c00080 	.word	0x00c00080
 8001ee8:	00c00040 	.word	0x00c00040
 8001eec:	00f42400 	.word	0x00f42400
 8001ef0:	03000200 	.word	0x03000200
 8001ef4:	03000100 	.word	0x03000100

08001ef8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001efe:	f7ff fded 	bl	8001adc <LL_RCC_GetSysClkSource>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	d851      	bhi.n	8001fac <RCC_GetSystemClockFreq+0xb4>
 8001f08:	a201      	add	r2, pc, #4	@ (adr r2, 8001f10 <RCC_GetSystemClockFreq+0x18>)
 8001f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0e:	bf00      	nop
 8001f10:	08001f45 	.word	0x08001f45
 8001f14:	08001fad 	.word	0x08001fad
 8001f18:	08001fad 	.word	0x08001fad
 8001f1c:	08001fad 	.word	0x08001fad
 8001f20:	08001f99 	.word	0x08001f99
 8001f24:	08001fad 	.word	0x08001fad
 8001f28:	08001fad 	.word	0x08001fad
 8001f2c:	08001fad 	.word	0x08001fad
 8001f30:	08001f9f 	.word	0x08001f9f
 8001f34:	08001fad 	.word	0x08001fad
 8001f38:	08001fad 	.word	0x08001fad
 8001f3c:	08001fad 	.word	0x08001fad
 8001f40:	08001fa5 	.word	0x08001fa5
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001f44:	f7ff fd9c 	bl	8001a80 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d111      	bne.n	8001f72 <RCC_GetSystemClockFreq+0x7a>
 8001f4e:	f7ff fd97 	bl	8001a80 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d004      	beq.n	8001f62 <RCC_GetSystemClockFreq+0x6a>
 8001f58:	f7ff fda4 	bl	8001aa4 <LL_RCC_MSI_GetRange>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	e003      	b.n	8001f6a <RCC_GetSystemClockFreq+0x72>
 8001f62:	f7ff fdad 	bl	8001ac0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001f66:	4603      	mov	r3, r0
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	4a28      	ldr	r2, [pc, #160]	@ (800200c <RCC_GetSystemClockFreq+0x114>)
 8001f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f70:	e010      	b.n	8001f94 <RCC_GetSystemClockFreq+0x9c>
 8001f72:	f7ff fd85 	bl	8001a80 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <RCC_GetSystemClockFreq+0x8e>
 8001f7c:	f7ff fd92 	bl	8001aa4 <LL_RCC_MSI_GetRange>
 8001f80:	4603      	mov	r3, r0
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	e003      	b.n	8001f8e <RCC_GetSystemClockFreq+0x96>
 8001f86:	f7ff fd9b 	bl	8001ac0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800200c <RCC_GetSystemClockFreq+0x114>)
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001f96:	e033      	b.n	8002000 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001f98:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <RCC_GetSystemClockFreq+0x118>)
 8001f9a:	607b      	str	r3, [r7, #4]
      break;
 8001f9c:	e030      	b.n	8002000 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <RCC_GetSystemClockFreq+0x11c>)
 8001fa0:	607b      	str	r3, [r7, #4]
      break;
 8001fa2:	e02d      	b.n	8002000 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001fa4:	f000 f876 	bl	8002094 <RCC_PLL_GetFreqDomain_SYS>
 8001fa8:	6078      	str	r0, [r7, #4]
      break;
 8001faa:	e029      	b.n	8002000 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001fac:	f7ff fd68 	bl	8001a80 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d111      	bne.n	8001fda <RCC_GetSystemClockFreq+0xe2>
 8001fb6:	f7ff fd63 	bl	8001a80 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d004      	beq.n	8001fca <RCC_GetSystemClockFreq+0xd2>
 8001fc0:	f7ff fd70 	bl	8001aa4 <LL_RCC_MSI_GetRange>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	e003      	b.n	8001fd2 <RCC_GetSystemClockFreq+0xda>
 8001fca:	f7ff fd79 	bl	8001ac0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <RCC_GetSystemClockFreq+0x114>)
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	e010      	b.n	8001ffc <RCC_GetSystemClockFreq+0x104>
 8001fda:	f7ff fd51 	bl	8001a80 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <RCC_GetSystemClockFreq+0xf6>
 8001fe4:	f7ff fd5e 	bl	8001aa4 <LL_RCC_MSI_GetRange>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	e003      	b.n	8001ff6 <RCC_GetSystemClockFreq+0xfe>
 8001fee:	f7ff fd67 	bl	8001ac0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	4a05      	ldr	r2, [pc, #20]	@ (800200c <RCC_GetSystemClockFreq+0x114>)
 8001ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffc:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001ffe:	bf00      	nop
  }

  return frequency;
 8002000:	687b      	ldr	r3, [r7, #4]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	08005648 	.word	0x08005648
 8002010:	00f42400 	.word	0x00f42400
 8002014:	007a1200 	.word	0x007a1200

08002018 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002020:	f7ff fd6a 	bl	8001af8 <LL_RCC_GetAHBPrescaler>
 8002024:	4603      	mov	r3, r0
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <RCC_GetHCLKClockFreq+0x28>)
 800202e:	5cd3      	ldrb	r3, [r2, r3]
 8002030:	461a      	mov	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	40d3      	lsrs	r3, r2
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	08005630 	.word	0x08005630

08002044 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800204c:	f7ff fd62 	bl	8001b14 <LL_RCC_GetAPB1Prescaler>
 8002050:	4603      	mov	r3, r0
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <RCC_GetPCLK1ClockFreq+0x24>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	461a      	mov	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	40d3      	lsrs	r3, r2
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	08005640 	.word	0x08005640

0800206c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002074:	f7ff fd5c 	bl	8001b30 <LL_RCC_GetAPB2Prescaler>
 8002078:	4603      	mov	r3, r0
 800207a:	0adb      	lsrs	r3, r3, #11
 800207c:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <RCC_GetPCLK2ClockFreq+0x24>)
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	461a      	mov	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	40d3      	lsrs	r3, r2
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	08005640 	.word	0x08005640

08002094 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800209a:	f7ff fd7f 	bl	8001b9c <LL_RCC_PLL_GetMainSource>
 800209e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d036      	beq.n	8002114 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d836      	bhi.n	800211a <RCC_PLL_GetFreqDomain_SYS+0x86>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d003      	beq.n	80020ba <RCC_PLL_GetFreqDomain_SYS+0x26>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d02a      	beq.n	800210e <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80020b8:	e02f      	b.n	800211a <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80020ba:	f7ff fce1 	bl	8001a80 <LL_RCC_MSI_IsEnabledRangeSelect>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d111      	bne.n	80020e8 <RCC_PLL_GetFreqDomain_SYS+0x54>
 80020c4:	f7ff fcdc 	bl	8001a80 <LL_RCC_MSI_IsEnabledRangeSelect>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <RCC_PLL_GetFreqDomain_SYS+0x44>
 80020ce:	f7ff fce9 	bl	8001aa4 <LL_RCC_MSI_GetRange>
 80020d2:	4603      	mov	r3, r0
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	e003      	b.n	80020e0 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80020d8:	f7ff fcf2 	bl	8001ac0 <LL_RCC_MSI_GetRangeAfterStandby>
 80020dc:	4603      	mov	r3, r0
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	4a2f      	ldr	r2, [pc, #188]	@ (80021a0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80020e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e6:	e010      	b.n	800210a <RCC_PLL_GetFreqDomain_SYS+0x76>
 80020e8:	f7ff fcca 	bl	8001a80 <LL_RCC_MSI_IsEnabledRangeSelect>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d004      	beq.n	80020fc <RCC_PLL_GetFreqDomain_SYS+0x68>
 80020f2:	f7ff fcd7 	bl	8001aa4 <LL_RCC_MSI_GetRange>
 80020f6:	4603      	mov	r3, r0
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	e003      	b.n	8002104 <RCC_PLL_GetFreqDomain_SYS+0x70>
 80020fc:	f7ff fce0 	bl	8001ac0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002100:	4603      	mov	r3, r0
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	4a26      	ldr	r2, [pc, #152]	@ (80021a0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800210c:	e02f      	b.n	800216e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800210e:	4b25      	ldr	r3, [pc, #148]	@ (80021a4 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8002110:	607b      	str	r3, [r7, #4]
      break;
 8002112:	e02c      	b.n	800216e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002114:	4b24      	ldr	r3, [pc, #144]	@ (80021a8 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8002116:	607b      	str	r3, [r7, #4]
      break;
 8002118:	e029      	b.n	800216e <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800211a:	f7ff fcb1 	bl	8001a80 <LL_RCC_MSI_IsEnabledRangeSelect>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d111      	bne.n	8002148 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8002124:	f7ff fcac 	bl	8001a80 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800212e:	f7ff fcb9 	bl	8001aa4 <LL_RCC_MSI_GetRange>
 8002132:	4603      	mov	r3, r0
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	e003      	b.n	8002140 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8002138:	f7ff fcc2 	bl	8001ac0 <LL_RCC_MSI_GetRangeAfterStandby>
 800213c:	4603      	mov	r3, r0
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	4a17      	ldr	r2, [pc, #92]	@ (80021a0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002146:	e010      	b.n	800216a <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8002148:	f7ff fc9a 	bl	8001a80 <LL_RCC_MSI_IsEnabledRangeSelect>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8002152:	f7ff fca7 	bl	8001aa4 <LL_RCC_MSI_GetRange>
 8002156:	4603      	mov	r3, r0
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	e003      	b.n	8002164 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 800215c:	f7ff fcb0 	bl	8001ac0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002160:	4603      	mov	r3, r0
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	4a0e      	ldr	r2, [pc, #56]	@ (80021a0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800216c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800216e:	f7ff fd3f 	bl	8001bf0 <LL_RCC_PLL_GetDivider>
 8002172:	4603      	mov	r3, r0
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	3301      	adds	r3, #1
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	fbb2 f4f3 	udiv	r4, r2, r3
 800217e:	f7ff fd1b 	bl	8001bb8 <LL_RCC_PLL_GetN>
 8002182:	4603      	mov	r3, r0
 8002184:	fb03 f404 	mul.w	r4, r3, r4
 8002188:	f7ff fd24 	bl	8001bd4 <LL_RCC_PLL_GetR>
 800218c:	4603      	mov	r3, r0
 800218e:	0e5b      	lsrs	r3, r3, #25
 8002190:	3301      	adds	r3, #1
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}
 80021a0:	08005648 	.word	0x08005648
 80021a4:	00f42400 	.word	0x00f42400
 80021a8:	007a1200 	.word	0x007a1200

080021ac <LL_USART_IsEnabled>:
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <LL_USART_IsEnabled+0x18>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <LL_USART_IsEnabled+0x1a>
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_USART_SetStopBitsLength>:
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	605a      	str	r2, [r3, #4]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_USART_SetHWFlowCtrl>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	609a      	str	r2, [r3, #8]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_USART_SetBaudRate>:
{
 800221e:	b480      	push	{r7}
 8002220:	b087      	sub	sp, #28
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002232:	d11a      	bne.n	800226a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	005a      	lsls	r2, r3, #1
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	441a      	add	r2, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	b29b      	uxth	r3, r3
 8002246:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	b29b      	uxth	r3, r3
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	60da      	str	r2, [r3, #12]
}
 8002268:	e00a      	b.n	8002280 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	085a      	lsrs	r2, r3, #1
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	441a      	add	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	b29b      	uxth	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	60da      	str	r2, [r3, #12]
}
 8002280:	bf00      	nop
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ff84 	bl	80021ac <LL_USART_IsEnabled>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d15b      	bne.n	8002362 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4b2f      	ldr	r3, [pc, #188]	@ (800236c <LL_USART_Init+0xe0>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	6851      	ldr	r1, [r2, #4]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	68d2      	ldr	r2, [r2, #12]
 80022ba:	4311      	orrs	r1, r2
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	6912      	ldr	r2, [r2, #16]
 80022c0:	4311      	orrs	r1, r2
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	6992      	ldr	r2, [r2, #24]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	4619      	mov	r1, r3
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ff7c 	bl	80021d2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	4619      	mov	r1, r3
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff89 	bl	80021f8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a21      	ldr	r2, [pc, #132]	@ (8002370 <LL_USART_Init+0xe4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d104      	bne.n	80022f8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80022ee:	2003      	movs	r0, #3
 80022f0:	f7ff fc8c 	bl	8001c0c <LL_RCC_GetUSARTClockFreq>
 80022f4:	60b8      	str	r0, [r7, #8]
 80022f6:	e023      	b.n	8002340 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002374 <LL_USART_Init+0xe8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d104      	bne.n	800230a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002300:	200c      	movs	r0, #12
 8002302:	f7ff fc83 	bl	8001c0c <LL_RCC_GetUSARTClockFreq>
 8002306:	60b8      	str	r0, [r7, #8]
 8002308:	e01a      	b.n	8002340 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a1a      	ldr	r2, [pc, #104]	@ (8002378 <LL_USART_Init+0xec>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d104      	bne.n	800231c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002312:	2030      	movs	r0, #48	@ 0x30
 8002314:	f7ff fc7a 	bl	8001c0c <LL_RCC_GetUSARTClockFreq>
 8002318:	60b8      	str	r0, [r7, #8]
 800231a:	e011      	b.n	8002340 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a17      	ldr	r2, [pc, #92]	@ (800237c <LL_USART_Init+0xf0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d104      	bne.n	800232e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002324:	20c0      	movs	r0, #192	@ 0xc0
 8002326:	f7ff fd53 	bl	8001dd0 <LL_RCC_GetUARTClockFreq>
 800232a:	60b8      	str	r0, [r7, #8]
 800232c:	e008      	b.n	8002340 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a13      	ldr	r2, [pc, #76]	@ (8002380 <LL_USART_Init+0xf4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d104      	bne.n	8002340 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002336:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800233a:	f7ff fd49 	bl	8001dd0 <LL_RCC_GetUARTClockFreq>
 800233e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00d      	beq.n	8002362 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff5e 	bl	800221e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	efff69f3 	.word	0xefff69f3
 8002370:	40013800 	.word	0x40013800
 8002374:	40004400 	.word	0x40004400
 8002378:	40004800 	.word	0x40004800
 800237c:	40004c00 	.word	0x40004c00
 8002380:	40005000 	.word	0x40005000

08002384 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800238c:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <LL_SetSystemCoreClock+0x1c>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000008 	.word	0x20000008

080023a4 <__NVIC_SetPriority>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db0a      	blt.n	80023ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	490c      	ldr	r1, [pc, #48]	@ (80023f0 <__NVIC_SetPriority+0x4c>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	440b      	add	r3, r1
 80023c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80023cc:	e00a      	b.n	80023e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4908      	ldr	r1, [pc, #32]	@ (80023f4 <__NVIC_SetPriority+0x50>)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3b04      	subs	r3, #4
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	440b      	add	r3, r1
 80023e2:	761a      	strb	r2, [r3, #24]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <SysTick_Handler+0x1c>)
 80023fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002400:	f001 ff0c 	bl	800421c <xTaskGetSchedulerState>
 8002404:	4603      	mov	r3, r0
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800240a:	f002 fe05 	bl	8005018 <xPortSysTickHandler>
  }
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800241c:	2100      	movs	r1, #0
 800241e:	f06f 0004 	mvn.w	r0, #4
 8002422:	f7ff ffbf 	bl	80023a4 <__NVIC_SetPriority>
#endif
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002432:	f3ef 8305 	mrs	r3, IPSR
 8002436:	603b      	str	r3, [r7, #0]
  return(result);
 8002438:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800243e:	f06f 0305 	mvn.w	r3, #5
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	e00c      	b.n	8002460 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <osKernelInitialize+0x44>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800244e:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <osKernelInitialize+0x44>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002454:	2300      	movs	r3, #0
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	e002      	b.n	8002460 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
 800245e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002460:	687b      	ldr	r3, [r7, #4]
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	200000b4 	.word	0x200000b4

08002474 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800247a:	f3ef 8305 	mrs	r3, IPSR
 800247e:	603b      	str	r3, [r7, #0]
  return(result);
 8002480:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002486:	f06f 0305 	mvn.w	r3, #5
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	e010      	b.n	80024b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800248e:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <osKernelStart+0x48>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d109      	bne.n	80024aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002496:	f7ff ffbf 	bl	8002418 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800249a:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <osKernelStart+0x48>)
 800249c:	2202      	movs	r2, #2
 800249e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80024a0:	f001 fa6e 	bl	8003980 <vTaskStartScheduler>
      stat = osOK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	e002      	b.n	80024b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
 80024ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024b0:	687b      	ldr	r3, [r7, #4]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200000b4 	.word	0x200000b4

080024c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08e      	sub	sp, #56	@ 0x38
 80024c4:	af04      	add	r7, sp, #16
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024d0:	f3ef 8305 	mrs	r3, IPSR
 80024d4:	617b      	str	r3, [r7, #20]
  return(result);
 80024d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d17e      	bne.n	80025da <osThreadNew+0x11a>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d07b      	beq.n	80025da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80024e6:	2318      	movs	r3, #24
 80024e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
 80024f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d045      	beq.n	8002586 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <osThreadNew+0x48>
        name = attr->name;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <osThreadNew+0x6e>
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b38      	cmp	r3, #56	@ 0x38
 8002520:	d805      	bhi.n	800252e <osThreadNew+0x6e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <osThreadNew+0x72>
        return (NULL);
 800252e:	2300      	movs	r3, #0
 8002530:	e054      	b.n	80025dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00e      	beq.n	8002568 <osThreadNew+0xa8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b5b      	cmp	r3, #91	@ 0x5b
 8002550:	d90a      	bls.n	8002568 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <osThreadNew+0xa8>
        mem = 1;
 8002562:	2301      	movs	r3, #1
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	e010      	b.n	800258a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10c      	bne.n	800258a <osThreadNew+0xca>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d108      	bne.n	800258a <osThreadNew+0xca>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <osThreadNew+0xca>
          mem = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	61bb      	str	r3, [r7, #24]
 8002584:	e001      	b.n	800258a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d110      	bne.n	80025b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002598:	9202      	str	r2, [sp, #8]
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	6a3a      	ldr	r2, [r7, #32]
 80025a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f001 f80e 	bl	80035c8 <xTaskCreateStatic>
 80025ac:	4603      	mov	r3, r0
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	e013      	b.n	80025da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d110      	bne.n	80025da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	f107 0310 	add.w	r3, r7, #16
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f001 f85c 	bl	8003688 <xTaskCreate>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d001      	beq.n	80025da <osThreadNew+0x11a>
            hTask = NULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025da:	693b      	ldr	r3, [r7, #16]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3728      	adds	r7, #40	@ 0x28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ec:	f3ef 8305 	mrs	r3, IPSR
 80025f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80025f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <osDelay+0x1c>
    stat = osErrorISR;
 80025f8:	f06f 0305 	mvn.w	r3, #5
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	e007      	b.n	8002610 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <osDelay+0x2c>
      vTaskDelay(ticks);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f001 f982 	bl	8003914 <vTaskDelay>
    }
  }

  return (stat);
 8002610:	68fb      	ldr	r3, [r7, #12]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4a07      	ldr	r2, [pc, #28]	@ (8002648 <vApplicationGetIdleTaskMemory+0x2c>)
 800262c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4a06      	ldr	r2, [pc, #24]	@ (800264c <vApplicationGetIdleTaskMemory+0x30>)
 8002632:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2280      	movs	r2, #128	@ 0x80
 8002638:	601a      	str	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	200000b8 	.word	0x200000b8
 800264c:	20000114 	.word	0x20000114

08002650 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4a07      	ldr	r2, [pc, #28]	@ (800267c <vApplicationGetTimerTaskMemory+0x2c>)
 8002660:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4a06      	ldr	r2, [pc, #24]	@ (8002680 <vApplicationGetTimerTaskMemory+0x30>)
 8002666:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800266e:	601a      	str	r2, [r3, #0]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	20000314 	.word	0x20000314
 8002680:	20000370 	.word	0x20000370

08002684 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 0208 	add.w	r2, r3, #8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f103 0208 	add.w	r2, r3, #8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f103 0208 	add.w	r2, r3, #8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	601a      	str	r2, [r3, #0]
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d103      	bne.n	8002746 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	e00c      	b.n	8002760 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3308      	adds	r3, #8
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e002      	b.n	8002754 <vListInsert+0x2e>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	429a      	cmp	r2, r3
 800275e:	d2f6      	bcs.n	800274e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	601a      	str	r2, [r3, #0]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6892      	ldr	r2, [r2, #8]
 80027ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6852      	ldr	r2, [r2, #4]
 80027b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d103      	bne.n	80027cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	1e5a      	subs	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002818:	f002 fb6e 	bl	8004ef8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002824:	68f9      	ldr	r1, [r7, #12]
 8002826:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	441a      	add	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002848:	3b01      	subs	r3, #1
 800284a:	68f9      	ldr	r1, [r7, #12]
 800284c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	441a      	add	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	22ff      	movs	r2, #255	@ 0xff
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	22ff      	movs	r2, #255	@ 0xff
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d114      	bne.n	8002898 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01a      	beq.n	80028ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3310      	adds	r3, #16
 800287a:	4618      	mov	r0, r3
 800287c:	f001 fb0e 	bl	8003e9c <xTaskRemoveFromEventList>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d012      	beq.n	80028ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002886:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <xQueueGenericReset+0xd0>)
 8002888:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	e009      	b.n	80028ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3310      	adds	r3, #16
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fef1 	bl	8002684 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3324      	adds	r3, #36	@ 0x24
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff feec 	bl	8002684 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028ac:	f002 fb56 	bl	8004f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028b0:	2301      	movs	r3, #1
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	e000ed04 	.word	0xe000ed04

080028c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08e      	sub	sp, #56	@ 0x38
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10b      	bne.n	80028ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80028d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10b      	bne.n	800290a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80028f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f6:	f383 8811 	msr	BASEPRI, r3
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	e7fd      	b.n	8002906 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <xQueueGenericCreateStatic+0x56>
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <xQueueGenericCreateStatic+0x5a>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <xQueueGenericCreateStatic+0x5c>
 800291a:	2300      	movs	r3, #0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10b      	bne.n	8002938 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002924:	f383 8811 	msr	BASEPRI, r3
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	623b      	str	r3, [r7, #32]
}
 8002932:	bf00      	nop
 8002934:	bf00      	nop
 8002936:	e7fd      	b.n	8002934 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <xQueueGenericCreateStatic+0x84>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <xQueueGenericCreateStatic+0x88>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <xQueueGenericCreateStatic+0x8a>
 8002948:	2300      	movs	r3, #0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10b      	bne.n	8002966 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	61fb      	str	r3, [r7, #28]
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	e7fd      	b.n	8002962 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002966:	2350      	movs	r3, #80	@ 0x50
 8002968:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b50      	cmp	r3, #80	@ 0x50
 800296e:	d00b      	beq.n	8002988 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	61bb      	str	r3, [r7, #24]
}
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002988:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800298e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00d      	beq.n	80029b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800299c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80029a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f840 	bl	8002a30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3730      	adds	r7, #48	@ 0x30
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b08a      	sub	sp, #40	@ 0x28
 80029be:	af02      	add	r7, sp, #8
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	4613      	mov	r3, r2
 80029c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10b      	bne.n	80029e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80029ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d2:	f383 8811 	msr	BASEPRI, r3
 80029d6:	f3bf 8f6f 	isb	sy
 80029da:	f3bf 8f4f 	dsb	sy
 80029de:	613b      	str	r3, [r7, #16]
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	e7fd      	b.n	80029e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	3350      	adds	r3, #80	@ 0x50
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fba1 	bl	800513c <pvPortMalloc>
 80029fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d011      	beq.n	8002a26 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3350      	adds	r3, #80	@ 0x50
 8002a0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a14:	79fa      	ldrb	r2, [r7, #7]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f805 	bl	8002a30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a26:	69bb      	ldr	r3, [r7, #24]
	}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e002      	b.n	8002a52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a5e:	2101      	movs	r1, #1
 8002a60:	69b8      	ldr	r0, [r7, #24]
 8002a62:	f7ff fec3 	bl	80027ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08e      	sub	sp, #56	@ 0x38
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a86:	2300      	movs	r3, #0
 8002a88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10b      	bne.n	8002aac <xQueueGenericSend+0x34>
	__asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d103      	bne.n	8002aba <xQueueGenericSend+0x42>
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <xQueueGenericSend+0x46>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <xQueueGenericSend+0x48>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <xQueueGenericSend+0x64>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d103      	bne.n	8002aea <xQueueGenericSend+0x72>
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <xQueueGenericSend+0x76>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <xQueueGenericSend+0x78>
 8002aee:	2300      	movs	r3, #0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10b      	bne.n	8002b0c <xQueueGenericSend+0x94>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	623b      	str	r3, [r7, #32]
}
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b0c:	f001 fb86 	bl	800421c <xTaskGetSchedulerState>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <xQueueGenericSend+0xa4>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <xQueueGenericSend+0xa8>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <xQueueGenericSend+0xaa>
 8002b20:	2300      	movs	r3, #0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10b      	bne.n	8002b3e <xQueueGenericSend+0xc6>
	__asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	61fb      	str	r3, [r7, #28]
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	e7fd      	b.n	8002b3a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b3e:	f002 f9db 	bl	8004ef8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <xQueueGenericSend+0xdc>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d129      	bne.n	8002ba8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b5a:	f000 fbc7 	bl	80032ec <prvCopyDataToQueue>
 8002b5e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d010      	beq.n	8002b8a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6a:	3324      	adds	r3, #36	@ 0x24
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 f995 	bl	8003e9c <xTaskRemoveFromEventList>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b78:	4b3f      	ldr	r3, [pc, #252]	@ (8002c78 <xQueueGenericSend+0x200>)
 8002b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	e00a      	b.n	8002ba0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b90:	4b39      	ldr	r3, [pc, #228]	@ (8002c78 <xQueueGenericSend+0x200>)
 8002b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ba0:	f002 f9dc 	bl	8004f5c <vPortExitCritical>
				return pdPASS;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e063      	b.n	8002c70 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bae:	f002 f9d5 	bl	8004f5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e05c      	b.n	8002c70 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d106      	bne.n	8002bca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 f9cf 	bl	8003f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bca:	f002 f9c7 	bl	8004f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bce:	f000 ff3f 	bl	8003a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bd2:	f002 f991 	bl	8004ef8 <vPortEnterCritical>
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d103      	bne.n	8002bec <xQueueGenericSend+0x174>
 8002be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bf2:	b25b      	sxtb	r3, r3
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d103      	bne.n	8002c02 <xQueueGenericSend+0x18a>
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c02:	f002 f9ab 	bl	8004f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c06:	1d3a      	adds	r2, r7, #4
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 f9be 	bl	8003f90 <xTaskCheckForTimeOut>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d124      	bne.n	8002c64 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c1c:	f000 fc5e 	bl	80034dc <prvIsQueueFull>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d018      	beq.n	8002c58 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c28:	3310      	adds	r3, #16
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 f8e2 	bl	8003df8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c36:	f000 fbe9 	bl	800340c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c3a:	f000 ff17 	bl	8003a6c <xTaskResumeAll>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f47f af7c 	bne.w	8002b3e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002c46:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <xQueueGenericSend+0x200>)
 8002c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	e772      	b.n	8002b3e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c5a:	f000 fbd7 	bl	800340c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c5e:	f000 ff05 	bl	8003a6c <xTaskResumeAll>
 8002c62:	e76c      	b.n	8002b3e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c66:	f000 fbd1 	bl	800340c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c6a:	f000 feff 	bl	8003a6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3738      	adds	r7, #56	@ 0x38
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	e000ed04 	.word	0xe000ed04

08002c7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b090      	sub	sp, #64	@ 0x40
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10b      	bne.n	8002cac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d103      	bne.n	8002cba <xQueueGenericSendFromISR+0x3e>
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <xQueueGenericSendFromISR+0x42>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <xQueueGenericSendFromISR+0x44>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d103      	bne.n	8002cea <xQueueGenericSendFromISR+0x6e>
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <xQueueGenericSendFromISR+0x72>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <xQueueGenericSendFromISR+0x74>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	623b      	str	r3, [r7, #32]
}
 8002d06:	bf00      	nop
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d0c:	f002 f9d4 	bl	80050b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d10:	f3ef 8211 	mrs	r2, BASEPRI
 8002d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	61fa      	str	r2, [r7, #28]
 8002d26:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d28:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d2a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d302      	bcc.n	8002d3e <xQueueGenericSendFromISR+0xc2>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d12f      	bne.n	8002d9e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002d54:	f000 faca 	bl	80032ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d58:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d112      	bne.n	8002d88 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d016      	beq.n	8002d98 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d6c:	3324      	adds	r3, #36	@ 0x24
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 f894 	bl	8003e9c <xTaskRemoveFromEventList>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00e      	beq.n	8002d98 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00b      	beq.n	8002d98 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e007      	b.n	8002d98 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	b25a      	sxtb	r2, r3
 8002d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002d9c:	e001      	b.n	8002da2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3740      	adds	r7, #64	@ 0x40
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08e      	sub	sp, #56	@ 0x38
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	623b      	str	r3, [r7, #32]
}
 8002dde:	bf00      	nop
 8002de0:	bf00      	nop
 8002de2:	e7fd      	b.n	8002de0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00b      	beq.n	8002e04 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df0:	f383 8811 	msr	BASEPRI, r3
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	61fb      	str	r3, [r7, #28]
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d103      	bne.n	8002e14 <xQueueGiveFromISR+0x5c>
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <xQueueGiveFromISR+0x60>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <xQueueGiveFromISR+0x62>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10b      	bne.n	8002e36 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	61bb      	str	r3, [r7, #24]
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	e7fd      	b.n	8002e32 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e36:	f002 f93f 	bl	80050b8 <vPortValidateInterruptPriority>
	__asm volatile
 8002e3a:	f3ef 8211 	mrs	r2, BASEPRI
 8002e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	617a      	str	r2, [r7, #20]
 8002e50:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002e52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d22b      	bcs.n	8002ebe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e76:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d112      	bne.n	8002ea8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8c:	3324      	adds	r3, #36	@ 0x24
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f001 f804 	bl	8003e9c <xTaskRemoveFromEventList>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00e      	beq.n	8002eb8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00b      	beq.n	8002eb8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e007      	b.n	8002eb8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002eac:	3301      	adds	r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	b25a      	sxtb	r2, r3
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ebc:	e001      	b.n	8002ec2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f383 8811 	msr	BASEPRI, r3
}
 8002ecc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3738      	adds	r7, #56	@ 0x38
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	@ 0x30
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10b      	bne.n	8002f0a <xQueueReceive+0x32>
	__asm volatile
 8002ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	623b      	str	r3, [r7, #32]
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	e7fd      	b.n	8002f06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d103      	bne.n	8002f18 <xQueueReceive+0x40>
 8002f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <xQueueReceive+0x44>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <xQueueReceive+0x46>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10b      	bne.n	8002f3a <xQueueReceive+0x62>
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	61fb      	str	r3, [r7, #28]
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	e7fd      	b.n	8002f36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f3a:	f001 f96f 	bl	800421c <xTaskGetSchedulerState>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <xQueueReceive+0x72>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <xQueueReceive+0x76>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <xQueueReceive+0x78>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <xQueueReceive+0x94>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	61bb      	str	r3, [r7, #24]
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f6c:	f001 ffc4 	bl	8004ef8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01f      	beq.n	8002fbc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f80:	f000 fa1e 	bl	80033c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	1e5a      	subs	r2, r3, #1
 8002f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00f      	beq.n	8002fb4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	3310      	adds	r3, #16
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 ff7f 	bl	8003e9c <xTaskRemoveFromEventList>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d007      	beq.n	8002fb4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fa4:	4b3c      	ldr	r3, [pc, #240]	@ (8003098 <xQueueReceive+0x1c0>)
 8002fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fb4:	f001 ffd2 	bl	8004f5c <vPortExitCritical>
				return pdPASS;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e069      	b.n	8003090 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fc2:	f001 ffcb 	bl	8004f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e062      	b.n	8003090 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fd0:	f107 0310 	add.w	r3, r7, #16
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 ffc5 	bl	8003f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fde:	f001 ffbd 	bl	8004f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fe2:	f000 fd35 	bl	8003a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fe6:	f001 ff87 	bl	8004ef8 <vPortEnterCritical>
 8002fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d103      	bne.n	8003000 <xQueueReceive+0x128>
 8002ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003002:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003006:	b25b      	sxtb	r3, r3
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d103      	bne.n	8003016 <xQueueReceive+0x13e>
 800300e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003016:	f001 ffa1 	bl	8004f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800301a:	1d3a      	adds	r2, r7, #4
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f000 ffb4 	bl	8003f90 <xTaskCheckForTimeOut>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d123      	bne.n	8003076 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800302e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003030:	f000 fa3e 	bl	80034b0 <prvIsQueueEmpty>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d017      	beq.n	800306a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800303a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303c:	3324      	adds	r3, #36	@ 0x24
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fed8 	bl	8003df8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800304a:	f000 f9df 	bl	800340c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800304e:	f000 fd0d 	bl	8003a6c <xTaskResumeAll>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d189      	bne.n	8002f6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003058:	4b0f      	ldr	r3, [pc, #60]	@ (8003098 <xQueueReceive+0x1c0>)
 800305a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	e780      	b.n	8002f6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800306a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800306c:	f000 f9ce 	bl	800340c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003070:	f000 fcfc 	bl	8003a6c <xTaskResumeAll>
 8003074:	e77a      	b.n	8002f6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003078:	f000 f9c8 	bl	800340c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800307c:	f000 fcf6 	bl	8003a6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003082:	f000 fa15 	bl	80034b0 <prvIsQueueEmpty>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	f43f af6f 	beq.w	8002f6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800308e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003090:	4618      	mov	r0, r3
 8003092:	3730      	adds	r7, #48	@ 0x30
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	e000ed04 	.word	0xe000ed04

0800309c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08e      	sub	sp, #56	@ 0x38
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10b      	bne.n	80030d0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	623b      	str	r3, [r7, #32]
}
 80030ca:	bf00      	nop
 80030cc:	bf00      	nop
 80030ce:	e7fd      	b.n	80030cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00b      	beq.n	80030f0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	61fb      	str	r3, [r7, #28]
}
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030f0:	f001 f894 	bl	800421c <xTaskGetSchedulerState>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <xQueueSemaphoreTake+0x64>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <xQueueSemaphoreTake+0x68>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <xQueueSemaphoreTake+0x6a>
 8003104:	2300      	movs	r3, #0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10b      	bne.n	8003122 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	61bb      	str	r3, [r7, #24]
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	e7fd      	b.n	800311e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003122:	f001 fee9 	bl	8004ef8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800312c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312e:	2b00      	cmp	r3, #0
 8003130:	d024      	beq.n	800317c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003134:	1e5a      	subs	r2, r3, #1
 8003136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003138:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800313a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d104      	bne.n	800314c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003142:	f001 f9e5 	bl	8004510 <pvTaskIncrementMutexHeldCount>
 8003146:	4602      	mov	r2, r0
 8003148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00f      	beq.n	8003174 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003156:	3310      	adds	r3, #16
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fe9f 	bl	8003e9c <xTaskRemoveFromEventList>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003164:	4b54      	ldr	r3, [pc, #336]	@ (80032b8 <xQueueSemaphoreTake+0x21c>)
 8003166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003174:	f001 fef2 	bl	8004f5c <vPortExitCritical>
				return pdPASS;
 8003178:	2301      	movs	r3, #1
 800317a:	e098      	b.n	80032ae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d112      	bne.n	80031a8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	617b      	str	r3, [r7, #20]
}
 800319a:	bf00      	nop
 800319c:	bf00      	nop
 800319e:	e7fd      	b.n	800319c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80031a0:	f001 fedc 	bl	8004f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e082      	b.n	80032ae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031ae:	f107 030c 	add.w	r3, r7, #12
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fed6 	bl	8003f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031b8:	2301      	movs	r3, #1
 80031ba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031bc:	f001 fece 	bl	8004f5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031c0:	f000 fc46 	bl	8003a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031c4:	f001 fe98 	bl	8004ef8 <vPortEnterCritical>
 80031c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031ce:	b25b      	sxtb	r3, r3
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d103      	bne.n	80031de <xQueueSemaphoreTake+0x142>
 80031d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031e4:	b25b      	sxtb	r3, r3
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d103      	bne.n	80031f4 <xQueueSemaphoreTake+0x158>
 80031ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031f4:	f001 feb2 	bl	8004f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031f8:	463a      	mov	r2, r7
 80031fa:	f107 030c 	add.w	r3, r7, #12
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fec5 	bl	8003f90 <xTaskCheckForTimeOut>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d132      	bne.n	8003272 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800320c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800320e:	f000 f94f 	bl	80034b0 <prvIsQueueEmpty>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d026      	beq.n	8003266 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003220:	f001 fe6a 	bl	8004ef8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4618      	mov	r0, r3
 800322a:	f001 f815 	bl	8004258 <xTaskPriorityInherit>
 800322e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003230:	f001 fe94 	bl	8004f5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003236:	3324      	adds	r3, #36	@ 0x24
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fddb 	bl	8003df8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003242:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003244:	f000 f8e2 	bl	800340c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003248:	f000 fc10 	bl	8003a6c <xTaskResumeAll>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	f47f af67 	bne.w	8003122 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003254:	4b18      	ldr	r3, [pc, #96]	@ (80032b8 <xQueueSemaphoreTake+0x21c>)
 8003256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	e75d      	b.n	8003122 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003266:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003268:	f000 f8d0 	bl	800340c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800326c:	f000 fbfe 	bl	8003a6c <xTaskResumeAll>
 8003270:	e757      	b.n	8003122 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003272:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003274:	f000 f8ca 	bl	800340c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003278:	f000 fbf8 	bl	8003a6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800327c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800327e:	f000 f917 	bl	80034b0 <prvIsQueueEmpty>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	f43f af4c 	beq.w	8003122 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00d      	beq.n	80032ac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003290:	f001 fe32 	bl	8004ef8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003294:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003296:	f000 f811 	bl	80032bc <prvGetDisinheritPriorityAfterTimeout>
 800329a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800329c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032a2:	4618      	mov	r0, r3
 80032a4:	f001 f8b0 	bl	8004408 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80032a8:	f001 fe58 	bl	8004f5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3738      	adds	r7, #56	@ 0x38
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	e000ed04 	.word	0xe000ed04

080032bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d006      	beq.n	80032da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e001      	b.n	80032de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80032de:	68fb      	ldr	r3, [r7, #12]
	}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10d      	bne.n	8003326 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d14d      	bne.n	80033ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4618      	mov	r0, r3
 8003318:	f001 f806 	bl	8004328 <xTaskPriorityDisinherit>
 800331c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	e043      	b.n	80033ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d119      	bne.n	8003360 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6858      	ldr	r0, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	461a      	mov	r2, r3
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	f002 f91a 	bl	8005570 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	441a      	add	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d32b      	bcc.n	80033ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	e026      	b.n	80033ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	68d8      	ldr	r0, [r3, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	461a      	mov	r2, r3
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	f002 f900 	bl	8005570 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	425b      	negs	r3, r3
 800337a:	441a      	add	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d207      	bcs.n	800339c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	425b      	negs	r3, r3
 8003396:	441a      	add	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d105      	bne.n	80033ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80033b6:	697b      	ldr	r3, [r7, #20]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d018      	beq.n	8003404 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	441a      	add	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d303      	bcc.n	80033f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	461a      	mov	r2, r3
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f002 f8b6 	bl	8005570 <memcpy>
	}
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003414:	f001 fd70 	bl	8004ef8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800341e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003420:	e011      	b.n	8003446 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d012      	beq.n	8003450 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3324      	adds	r3, #36	@ 0x24
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fd34 	bl	8003e9c <xTaskRemoveFromEventList>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800343a:	f000 fe0d 	bl	8004058 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	3b01      	subs	r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	dce9      	bgt.n	8003422 <prvUnlockQueue+0x16>
 800344e:	e000      	b.n	8003452 <prvUnlockQueue+0x46>
					break;
 8003450:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	22ff      	movs	r2, #255	@ 0xff
 8003456:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800345a:	f001 fd7f 	bl	8004f5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800345e:	f001 fd4b 	bl	8004ef8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003468:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800346a:	e011      	b.n	8003490 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d012      	beq.n	800349a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3310      	adds	r3, #16
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fd0f 	bl	8003e9c <xTaskRemoveFromEventList>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003484:	f000 fde8 	bl	8004058 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003488:	7bbb      	ldrb	r3, [r7, #14]
 800348a:	3b01      	subs	r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003494:	2b00      	cmp	r3, #0
 8003496:	dce9      	bgt.n	800346c <prvUnlockQueue+0x60>
 8003498:	e000      	b.n	800349c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800349a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	22ff      	movs	r2, #255	@ 0xff
 80034a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80034a4:	f001 fd5a 	bl	8004f5c <vPortExitCritical>
}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034b8:	f001 fd1e 	bl	8004ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e001      	b.n	80034ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034ce:	f001 fd45 	bl	8004f5c <vPortExitCritical>

	return xReturn;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034e4:	f001 fd08 	bl	8004ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d102      	bne.n	80034fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034f4:	2301      	movs	r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e001      	b.n	80034fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034fe:	f001 fd2d 	bl	8004f5c <vPortExitCritical>

	return xReturn;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	e014      	b.n	8003546 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800351c:	4a0f      	ldr	r2, [pc, #60]	@ (800355c <vQueueAddToRegistry+0x50>)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003528:	490c      	ldr	r1, [pc, #48]	@ (800355c <vQueueAddToRegistry+0x50>)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003532:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <vQueueAddToRegistry+0x50>)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800353e:	e006      	b.n	800354e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3301      	adds	r3, #1
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b07      	cmp	r3, #7
 800354a:	d9e7      	bls.n	800351c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000770 	.word	0x20000770

08003560 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003570:	f001 fcc2 	bl	8004ef8 <vPortEnterCritical>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800357a:	b25b      	sxtb	r3, r3
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d103      	bne.n	800358a <vQueueWaitForMessageRestricted+0x2a>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003590:	b25b      	sxtb	r3, r3
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d103      	bne.n	80035a0 <vQueueWaitForMessageRestricted+0x40>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035a0:	f001 fcdc 	bl	8004f5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d106      	bne.n	80035ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3324      	adds	r3, #36	@ 0x24
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fc45 	bl	8003e44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f7ff ff26 	bl	800340c <prvUnlockQueue>
	}
 80035c0:	bf00      	nop
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08e      	sub	sp, #56	@ 0x38
 80035cc:	af04      	add	r7, sp, #16
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	623b      	str	r3, [r7, #32]
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <xTaskCreateStatic+0x4a>
	__asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	61fb      	str	r3, [r7, #28]
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	e7fd      	b.n	800360e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003612:	235c      	movs	r3, #92	@ 0x5c
 8003614:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b5c      	cmp	r3, #92	@ 0x5c
 800361a:	d00b      	beq.n	8003634 <xTaskCreateStatic+0x6c>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	61bb      	str	r3, [r7, #24]
}
 800362e:	bf00      	nop
 8003630:	bf00      	nop
 8003632:	e7fd      	b.n	8003630 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003634:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01e      	beq.n	800367a <xTaskCreateStatic+0xb2>
 800363c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01b      	beq.n	800367a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003654:	2300      	movs	r3, #0
 8003656:	9303      	str	r3, [sp, #12]
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	9302      	str	r3, [sp, #8]
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f850 	bl	8003712 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003672:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003674:	f000 f8de 	bl	8003834 <prvAddNewTaskToReadyList>
 8003678:	e001      	b.n	800367e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800367e:	697b      	ldr	r3, [r7, #20]
	}
 8003680:	4618      	mov	r0, r3
 8003682:	3728      	adds	r7, #40	@ 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	@ 0x30
 800368c:	af04      	add	r7, sp, #16
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fd4d 	bl	800513c <pvPortMalloc>
 80036a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00e      	beq.n	80036c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036aa:	205c      	movs	r0, #92	@ 0x5c
 80036ac:	f001 fd46 	bl	800513c <pvPortMalloc>
 80036b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80036be:	e005      	b.n	80036cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036c0:	6978      	ldr	r0, [r7, #20]
 80036c2:	f001 fe09 	bl	80052d8 <vPortFree>
 80036c6:	e001      	b.n	80036cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d017      	beq.n	8003702 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	2300      	movs	r3, #0
 80036de:	9303      	str	r3, [sp, #12]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	9302      	str	r3, [sp, #8]
 80036e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f80e 	bl	8003712 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036f6:	69f8      	ldr	r0, [r7, #28]
 80036f8:	f000 f89c 	bl	8003834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036fc:	2301      	movs	r3, #1
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e002      	b.n	8003708 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003702:	f04f 33ff 	mov.w	r3, #4294967295
 8003706:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003708:	69bb      	ldr	r3, [r7, #24]
	}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b088      	sub	sp, #32
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003722:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	461a      	mov	r2, r3
 800372a:	21a5      	movs	r1, #165	@ 0xa5
 800372c:	f001 fef4 	bl	8005518 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800373a:	3b01      	subs	r3, #1
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f023 0307 	bic.w	r3, r3, #7
 8003748:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00b      	beq.n	800376c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	617b      	str	r3, [r7, #20]
}
 8003766:	bf00      	nop
 8003768:	bf00      	nop
 800376a:	e7fd      	b.n	8003768 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01f      	beq.n	80037b2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	e012      	b.n	800379e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	7819      	ldrb	r1, [r3, #0]
 8003780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	3334      	adds	r3, #52	@ 0x34
 8003788:	460a      	mov	r2, r1
 800378a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d006      	beq.n	80037a6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	3301      	adds	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b0f      	cmp	r3, #15
 80037a2:	d9e9      	bls.n	8003778 <prvInitialiseNewTask+0x66>
 80037a4:	e000      	b.n	80037a8 <prvInitialiseNewTask+0x96>
			{
				break;
 80037a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037b0:	e003      	b.n	80037ba <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037bc:	2b37      	cmp	r3, #55	@ 0x37
 80037be:	d901      	bls.n	80037c4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037c0:	2337      	movs	r3, #55	@ 0x37
 80037c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037c8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037ce:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	2200      	movs	r2, #0
 80037d4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d8:	3304      	adds	r3, #4
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe ff72 	bl	80026c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e2:	3318      	adds	r3, #24
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe ff6d 	bl	80026c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	2200      	movs	r2, #0
 8003804:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	69b8      	ldr	r0, [r7, #24]
 8003814:	f001 fa3e 	bl	8004c94 <pxPortInitialiseStack>
 8003818:	4602      	mov	r2, r0
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800381e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800382a:	bf00      	nop
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800383c:	f001 fb5c 	bl	8004ef8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003840:	4b2d      	ldr	r3, [pc, #180]	@ (80038f8 <prvAddNewTaskToReadyList+0xc4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	4a2c      	ldr	r2, [pc, #176]	@ (80038f8 <prvAddNewTaskToReadyList+0xc4>)
 8003848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800384a:	4b2c      	ldr	r3, [pc, #176]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003852:	4a2a      	ldr	r2, [pc, #168]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003858:	4b27      	ldr	r3, [pc, #156]	@ (80038f8 <prvAddNewTaskToReadyList+0xc4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d110      	bne.n	8003882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003860:	f000 fc1e 	bl	80040a0 <prvInitialiseTaskLists>
 8003864:	e00d      	b.n	8003882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003866:	4b26      	ldr	r3, [pc, #152]	@ (8003900 <prvAddNewTaskToReadyList+0xcc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800386e:	4b23      	ldr	r3, [pc, #140]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	429a      	cmp	r2, r3
 800387a:	d802      	bhi.n	8003882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800387c:	4a1f      	ldr	r2, [pc, #124]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003882:	4b20      	ldr	r3, [pc, #128]	@ (8003904 <prvAddNewTaskToReadyList+0xd0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	4a1e      	ldr	r2, [pc, #120]	@ (8003904 <prvAddNewTaskToReadyList+0xd0>)
 800388a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800388c:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <prvAddNewTaskToReadyList+0xd0>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003898:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <prvAddNewTaskToReadyList+0xd4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d903      	bls.n	80038a8 <prvAddNewTaskToReadyList+0x74>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	4a18      	ldr	r2, [pc, #96]	@ (8003908 <prvAddNewTaskToReadyList+0xd4>)
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4a15      	ldr	r2, [pc, #84]	@ (800390c <prvAddNewTaskToReadyList+0xd8>)
 80038b6:	441a      	add	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f7fe ff0d 	bl	80026de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038c4:	f001 fb4a 	bl	8004f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <prvAddNewTaskToReadyList+0xcc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00e      	beq.n	80038ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038d0:	4b0a      	ldr	r3, [pc, #40]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	429a      	cmp	r2, r3
 80038dc:	d207      	bcs.n	80038ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038de:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <prvAddNewTaskToReadyList+0xdc>)
 80038e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000c84 	.word	0x20000c84
 80038fc:	200007b0 	.word	0x200007b0
 8003900:	20000c90 	.word	0x20000c90
 8003904:	20000ca0 	.word	0x20000ca0
 8003908:	20000c8c 	.word	0x20000c8c
 800390c:	200007b4 	.word	0x200007b4
 8003910:	e000ed04 	.word	0xe000ed04

08003914 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d018      	beq.n	8003958 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003926:	4b14      	ldr	r3, [pc, #80]	@ (8003978 <vTaskDelay+0x64>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <vTaskDelay+0x32>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	60bb      	str	r3, [r7, #8]
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	e7fd      	b.n	8003942 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003946:	f000 f883 	bl	8003a50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800394a:	2100      	movs	r1, #0
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fdf3 	bl	8004538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003952:	f000 f88b 	bl	8003a6c <xTaskResumeAll>
 8003956:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800395e:	4b07      	ldr	r3, [pc, #28]	@ (800397c <vTaskDelay+0x68>)
 8003960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000cac 	.word	0x20000cac
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	@ 0x28
 8003984:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800398e:	463a      	mov	r2, r7
 8003990:	1d39      	adds	r1, r7, #4
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fe40 	bl	800261c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800399c:	6839      	ldr	r1, [r7, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	9202      	str	r2, [sp, #8]
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	2300      	movs	r3, #0
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	460a      	mov	r2, r1
 80039ae:	4922      	ldr	r1, [pc, #136]	@ (8003a38 <vTaskStartScheduler+0xb8>)
 80039b0:	4822      	ldr	r0, [pc, #136]	@ (8003a3c <vTaskStartScheduler+0xbc>)
 80039b2:	f7ff fe09 	bl	80035c8 <xTaskCreateStatic>
 80039b6:	4603      	mov	r3, r0
 80039b8:	4a21      	ldr	r2, [pc, #132]	@ (8003a40 <vTaskStartScheduler+0xc0>)
 80039ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039bc:	4b20      	ldr	r3, [pc, #128]	@ (8003a40 <vTaskStartScheduler+0xc0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039c4:	2301      	movs	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e001      	b.n	80039ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d102      	bne.n	80039da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039d4:	f000 fe04 	bl	80045e0 <xTimerCreateTimerTask>
 80039d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d116      	bne.n	8003a0e <vTaskStartScheduler+0x8e>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	613b      	str	r3, [r7, #16]
}
 80039f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039f4:	4b13      	ldr	r3, [pc, #76]	@ (8003a44 <vTaskStartScheduler+0xc4>)
 80039f6:	f04f 32ff 	mov.w	r2, #4294967295
 80039fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039fc:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <vTaskStartScheduler+0xc8>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a02:	4b12      	ldr	r3, [pc, #72]	@ (8003a4c <vTaskStartScheduler+0xcc>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a08:	f001 f9d2 	bl	8004db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a0c:	e00f      	b.n	8003a2e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d10b      	bne.n	8003a2e <vTaskStartScheduler+0xae>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	60fb      	str	r3, [r7, #12]
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	e7fd      	b.n	8003a2a <vTaskStartScheduler+0xaa>
}
 8003a2e:	bf00      	nop
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	080055d0 	.word	0x080055d0
 8003a3c:	08004071 	.word	0x08004071
 8003a40:	20000ca8 	.word	0x20000ca8
 8003a44:	20000ca4 	.word	0x20000ca4
 8003a48:	20000c90 	.word	0x20000c90
 8003a4c:	20000c88 	.word	0x20000c88

08003a50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a54:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <vTaskSuspendAll+0x18>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4a03      	ldr	r2, [pc, #12]	@ (8003a68 <vTaskSuspendAll+0x18>)
 8003a5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	20000cac 	.word	0x20000cac

08003a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a7a:	4b42      	ldr	r3, [pc, #264]	@ (8003b84 <xTaskResumeAll+0x118>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10b      	bne.n	8003a9a <xTaskResumeAll+0x2e>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	603b      	str	r3, [r7, #0]
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	e7fd      	b.n	8003a96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a9a:	f001 fa2d 	bl	8004ef8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a9e:	4b39      	ldr	r3, [pc, #228]	@ (8003b84 <xTaskResumeAll+0x118>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	4a37      	ldr	r2, [pc, #220]	@ (8003b84 <xTaskResumeAll+0x118>)
 8003aa6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aa8:	4b36      	ldr	r3, [pc, #216]	@ (8003b84 <xTaskResumeAll+0x118>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d162      	bne.n	8003b76 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ab0:	4b35      	ldr	r3, [pc, #212]	@ (8003b88 <xTaskResumeAll+0x11c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d05e      	beq.n	8003b76 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ab8:	e02f      	b.n	8003b1a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aba:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <xTaskResumeAll+0x120>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3318      	adds	r3, #24
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fe66 	bl	8002798 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fe61 	bl	8002798 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ada:	4b2d      	ldr	r3, [pc, #180]	@ (8003b90 <xTaskResumeAll+0x124>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d903      	bls.n	8003aea <xTaskResumeAll+0x7e>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8003b90 <xTaskResumeAll+0x124>)
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4a27      	ldr	r2, [pc, #156]	@ (8003b94 <xTaskResumeAll+0x128>)
 8003af8:	441a      	add	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3304      	adds	r3, #4
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f7fe fdec 	bl	80026de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0a:	4b23      	ldr	r3, [pc, #140]	@ (8003b98 <xTaskResumeAll+0x12c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003b14:	4b21      	ldr	r3, [pc, #132]	@ (8003b9c <xTaskResumeAll+0x130>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b8c <xTaskResumeAll+0x120>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1cb      	bne.n	8003aba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b28:	f000 fb58 	bl	80041dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba0 <xTaskResumeAll+0x134>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d010      	beq.n	8003b5a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b38:	f000 f846 	bl	8003bc8 <xTaskIncrementTick>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003b42:	4b16      	ldr	r3, [pc, #88]	@ (8003b9c <xTaskResumeAll+0x130>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f1      	bne.n	8003b38 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003b54:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <xTaskResumeAll+0x134>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b5a:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <xTaskResumeAll+0x130>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b62:	2301      	movs	r3, #1
 8003b64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b66:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba4 <xTaskResumeAll+0x138>)
 8003b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b76:	f001 f9f1 	bl	8004f5c <vPortExitCritical>

	return xAlreadyYielded;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000cac 	.word	0x20000cac
 8003b88:	20000c84 	.word	0x20000c84
 8003b8c:	20000c44 	.word	0x20000c44
 8003b90:	20000c8c 	.word	0x20000c8c
 8003b94:	200007b4 	.word	0x200007b4
 8003b98:	200007b0 	.word	0x200007b0
 8003b9c:	20000c98 	.word	0x20000c98
 8003ba0:	20000c94 	.word	0x20000c94
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bae:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <xTaskGetTickCount+0x1c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bb4:	687b      	ldr	r3, [r7, #4]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000c88 	.word	0x20000c88

08003bc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8003d10 <xTaskIncrementTick+0x148>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f040 8090 	bne.w	8003cfc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8003d14 <xTaskIncrementTick+0x14c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003be4:	4a4b      	ldr	r2, [pc, #300]	@ (8003d14 <xTaskIncrementTick+0x14c>)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d121      	bne.n	8003c34 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bf0:	4b49      	ldr	r3, [pc, #292]	@ (8003d18 <xTaskIncrementTick+0x150>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	603b      	str	r3, [r7, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	e7fd      	b.n	8003c0e <xTaskIncrementTick+0x46>
 8003c12:	4b41      	ldr	r3, [pc, #260]	@ (8003d18 <xTaskIncrementTick+0x150>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	4b40      	ldr	r3, [pc, #256]	@ (8003d1c <xTaskIncrementTick+0x154>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d18 <xTaskIncrementTick+0x150>)
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4a3e      	ldr	r2, [pc, #248]	@ (8003d1c <xTaskIncrementTick+0x154>)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b3e      	ldr	r3, [pc, #248]	@ (8003d20 <xTaskIncrementTick+0x158>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d20 <xTaskIncrementTick+0x158>)
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	f000 fad4 	bl	80041dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c34:	4b3b      	ldr	r3, [pc, #236]	@ (8003d24 <xTaskIncrementTick+0x15c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d349      	bcc.n	8003cd2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c3e:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <xTaskIncrementTick+0x150>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c48:	4b36      	ldr	r3, [pc, #216]	@ (8003d24 <xTaskIncrementTick+0x15c>)
 8003c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4e:	601a      	str	r2, [r3, #0]
					break;
 8003c50:	e03f      	b.n	8003cd2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c52:	4b31      	ldr	r3, [pc, #196]	@ (8003d18 <xTaskIncrementTick+0x150>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d203      	bcs.n	8003c72 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003d24 <xTaskIncrementTick+0x15c>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c70:	e02f      	b.n	8003cd2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	3304      	adds	r3, #4
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fd8e 	bl	8002798 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	3318      	adds	r3, #24
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe fd85 	bl	8002798 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c92:	4b25      	ldr	r3, [pc, #148]	@ (8003d28 <xTaskIncrementTick+0x160>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d903      	bls.n	8003ca2 <xTaskIncrementTick+0xda>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	4a22      	ldr	r2, [pc, #136]	@ (8003d28 <xTaskIncrementTick+0x160>)
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4a1f      	ldr	r2, [pc, #124]	@ (8003d2c <xTaskIncrementTick+0x164>)
 8003cb0:	441a      	add	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f7fe fd10 	bl	80026de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d30 <xTaskIncrementTick+0x168>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d3b8      	bcc.n	8003c3e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd0:	e7b5      	b.n	8003c3e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cd2:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <xTaskIncrementTick+0x168>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd8:	4914      	ldr	r1, [pc, #80]	@ (8003d2c <xTaskIncrementTick+0x164>)
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d901      	bls.n	8003cee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003cea:	2301      	movs	r3, #1
 8003cec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cee:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <xTaskIncrementTick+0x16c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	e004      	b.n	8003d06 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003d38 <xTaskIncrementTick+0x170>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3301      	adds	r3, #1
 8003d02:	4a0d      	ldr	r2, [pc, #52]	@ (8003d38 <xTaskIncrementTick+0x170>)
 8003d04:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d06:	697b      	ldr	r3, [r7, #20]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20000cac 	.word	0x20000cac
 8003d14:	20000c88 	.word	0x20000c88
 8003d18:	20000c3c 	.word	0x20000c3c
 8003d1c:	20000c40 	.word	0x20000c40
 8003d20:	20000c9c 	.word	0x20000c9c
 8003d24:	20000ca4 	.word	0x20000ca4
 8003d28:	20000c8c 	.word	0x20000c8c
 8003d2c:	200007b4 	.word	0x200007b4
 8003d30:	200007b0 	.word	0x200007b0
 8003d34:	20000c98 	.word	0x20000c98
 8003d38:	20000c94 	.word	0x20000c94

08003d3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d42:	4b28      	ldr	r3, [pc, #160]	@ (8003de4 <vTaskSwitchContext+0xa8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d4a:	4b27      	ldr	r3, [pc, #156]	@ (8003de8 <vTaskSwitchContext+0xac>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d50:	e042      	b.n	8003dd8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003d52:	4b25      	ldr	r3, [pc, #148]	@ (8003de8 <vTaskSwitchContext+0xac>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d58:	4b24      	ldr	r3, [pc, #144]	@ (8003dec <vTaskSwitchContext+0xb0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e011      	b.n	8003d84 <vTaskSwitchContext+0x48>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <vTaskSwitchContext+0x42>
	__asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	607b      	str	r3, [r7, #4]
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	e7fd      	b.n	8003d7a <vTaskSwitchContext+0x3e>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	491a      	ldr	r1, [pc, #104]	@ (8003df0 <vTaskSwitchContext+0xb4>)
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0e3      	beq.n	8003d60 <vTaskSwitchContext+0x24>
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4a13      	ldr	r2, [pc, #76]	@ (8003df0 <vTaskSwitchContext+0xb4>)
 8003da4:	4413      	add	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3308      	adds	r3, #8
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d104      	bne.n	8003dc8 <vTaskSwitchContext+0x8c>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4a09      	ldr	r2, [pc, #36]	@ (8003df4 <vTaskSwitchContext+0xb8>)
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	4a06      	ldr	r2, [pc, #24]	@ (8003dec <vTaskSwitchContext+0xb0>)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	20000cac 	.word	0x20000cac
 8003de8:	20000c98 	.word	0x20000c98
 8003dec:	20000c8c 	.word	0x20000c8c
 8003df0:	200007b4 	.word	0x200007b4
 8003df4:	200007b0 	.word	0x200007b0

08003df8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	60fb      	str	r3, [r7, #12]
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e20:	4b07      	ldr	r3, [pc, #28]	@ (8003e40 <vTaskPlaceOnEventList+0x48>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3318      	adds	r3, #24
 8003e26:	4619      	mov	r1, r3
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fe fc7c 	bl	8002726 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e2e:	2101      	movs	r1, #1
 8003e30:	6838      	ldr	r0, [r7, #0]
 8003e32:	f000 fb81 	bl	8004538 <prvAddCurrentTaskToDelayedList>
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200007b0 	.word	0x200007b0

08003e44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	617b      	str	r3, [r7, #20]
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	e7fd      	b.n	8003e6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e98 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3318      	adds	r3, #24
 8003e74:	4619      	mov	r1, r3
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7fe fc31 	bl	80026de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	68b8      	ldr	r0, [r7, #8]
 8003e8c:	f000 fb54 	bl	8004538 <prvAddCurrentTaskToDelayedList>
	}
 8003e90:	bf00      	nop
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	200007b0 	.word	0x200007b0

08003e9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	60fb      	str	r3, [r7, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3318      	adds	r3, #24
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fc62 	bl	8002798 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <xTaskRemoveFromEventList+0xb0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d11d      	bne.n	8003f18 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe fc59 	bl	8002798 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eea:	4b19      	ldr	r3, [pc, #100]	@ (8003f50 <xTaskRemoveFromEventList+0xb4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d903      	bls.n	8003efa <xTaskRemoveFromEventList+0x5e>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef6:	4a16      	ldr	r2, [pc, #88]	@ (8003f50 <xTaskRemoveFromEventList+0xb4>)
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4a13      	ldr	r2, [pc, #76]	@ (8003f54 <xTaskRemoveFromEventList+0xb8>)
 8003f08:	441a      	add	r2, r3
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4610      	mov	r0, r2
 8003f12:	f7fe fbe4 	bl	80026de <vListInsertEnd>
 8003f16:	e005      	b.n	8003f24 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	3318      	adds	r3, #24
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	480e      	ldr	r0, [pc, #56]	@ (8003f58 <xTaskRemoveFromEventList+0xbc>)
 8003f20:	f7fe fbdd 	bl	80026de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f28:	4b0c      	ldr	r3, [pc, #48]	@ (8003f5c <xTaskRemoveFromEventList+0xc0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d905      	bls.n	8003f3e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f32:	2301      	movs	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f36:	4b0a      	ldr	r3, [pc, #40]	@ (8003f60 <xTaskRemoveFromEventList+0xc4>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e001      	b.n	8003f42 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f42:	697b      	ldr	r3, [r7, #20]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000cac 	.word	0x20000cac
 8003f50:	20000c8c 	.word	0x20000c8c
 8003f54:	200007b4 	.word	0x200007b4
 8003f58:	20000c44 	.word	0x20000c44
 8003f5c:	200007b0 	.word	0x200007b0
 8003f60:	20000c98 	.word	0x20000c98

08003f64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <vTaskInternalSetTimeOutState+0x24>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f74:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <vTaskInternalSetTimeOutState+0x28>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	605a      	str	r2, [r3, #4]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	20000c9c 	.word	0x20000c9c
 8003f8c:	20000c88 	.word	0x20000c88

08003f90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	613b      	str	r3, [r7, #16]
}
 8003fb2:	bf00      	nop
 8003fb4:	bf00      	nop
 8003fb6:	e7fd      	b.n	8003fb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	60fb      	str	r3, [r7, #12]
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	e7fd      	b.n	8003fd2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003fd6:	f000 ff8f 	bl	8004ef8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fda:	4b1d      	ldr	r3, [pc, #116]	@ (8004050 <xTaskCheckForTimeOut+0xc0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d102      	bne.n	8003ffa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	e023      	b.n	8004042 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <xTaskCheckForTimeOut+0xc4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d007      	beq.n	8004016 <xTaskCheckForTimeOut+0x86>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	429a      	cmp	r2, r3
 800400e:	d302      	bcc.n	8004016 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004010:	2301      	movs	r3, #1
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	e015      	b.n	8004042 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	429a      	cmp	r2, r3
 800401e:	d20b      	bcs.n	8004038 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	1ad2      	subs	r2, r2, r3
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ff99 	bl	8003f64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	e004      	b.n	8004042 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800403e:	2301      	movs	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004042:	f000 ff8b 	bl	8004f5c <vPortExitCritical>

	return xReturn;
 8004046:	69fb      	ldr	r3, [r7, #28]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000c88 	.word	0x20000c88
 8004054:	20000c9c 	.word	0x20000c9c

08004058 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800405c:	4b03      	ldr	r3, [pc, #12]	@ (800406c <vTaskMissedYield+0x14>)
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]
}
 8004062:	bf00      	nop
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	20000c98 	.word	0x20000c98

08004070 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004078:	f000 f852 	bl	8004120 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800407c:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <prvIdleTask+0x28>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d9f9      	bls.n	8004078 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004084:	4b05      	ldr	r3, [pc, #20]	@ (800409c <prvIdleTask+0x2c>)
 8004086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004094:	e7f0      	b.n	8004078 <prvIdleTask+0x8>
 8004096:	bf00      	nop
 8004098:	200007b4 	.word	0x200007b4
 800409c:	e000ed04 	.word	0xe000ed04

080040a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040a6:	2300      	movs	r3, #0
 80040a8:	607b      	str	r3, [r7, #4]
 80040aa:	e00c      	b.n	80040c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4a12      	ldr	r2, [pc, #72]	@ (8004100 <prvInitialiseTaskLists+0x60>)
 80040b8:	4413      	add	r3, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fae2 	bl	8002684 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3301      	adds	r3, #1
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b37      	cmp	r3, #55	@ 0x37
 80040ca:	d9ef      	bls.n	80040ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040cc:	480d      	ldr	r0, [pc, #52]	@ (8004104 <prvInitialiseTaskLists+0x64>)
 80040ce:	f7fe fad9 	bl	8002684 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040d2:	480d      	ldr	r0, [pc, #52]	@ (8004108 <prvInitialiseTaskLists+0x68>)
 80040d4:	f7fe fad6 	bl	8002684 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040d8:	480c      	ldr	r0, [pc, #48]	@ (800410c <prvInitialiseTaskLists+0x6c>)
 80040da:	f7fe fad3 	bl	8002684 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040de:	480c      	ldr	r0, [pc, #48]	@ (8004110 <prvInitialiseTaskLists+0x70>)
 80040e0:	f7fe fad0 	bl	8002684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040e4:	480b      	ldr	r0, [pc, #44]	@ (8004114 <prvInitialiseTaskLists+0x74>)
 80040e6:	f7fe facd 	bl	8002684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <prvInitialiseTaskLists+0x78>)
 80040ec:	4a05      	ldr	r2, [pc, #20]	@ (8004104 <prvInitialiseTaskLists+0x64>)
 80040ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040f0:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <prvInitialiseTaskLists+0x7c>)
 80040f2:	4a05      	ldr	r2, [pc, #20]	@ (8004108 <prvInitialiseTaskLists+0x68>)
 80040f4:	601a      	str	r2, [r3, #0]
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	200007b4 	.word	0x200007b4
 8004104:	20000c14 	.word	0x20000c14
 8004108:	20000c28 	.word	0x20000c28
 800410c:	20000c44 	.word	0x20000c44
 8004110:	20000c58 	.word	0x20000c58
 8004114:	20000c70 	.word	0x20000c70
 8004118:	20000c3c 	.word	0x20000c3c
 800411c:	20000c40 	.word	0x20000c40

08004120 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004126:	e019      	b.n	800415c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004128:	f000 fee6 	bl	8004ef8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800412c:	4b10      	ldr	r3, [pc, #64]	@ (8004170 <prvCheckTasksWaitingTermination+0x50>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	4618      	mov	r0, r3
 800413a:	f7fe fb2d 	bl	8002798 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800413e:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <prvCheckTasksWaitingTermination+0x54>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3b01      	subs	r3, #1
 8004144:	4a0b      	ldr	r2, [pc, #44]	@ (8004174 <prvCheckTasksWaitingTermination+0x54>)
 8004146:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004148:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <prvCheckTasksWaitingTermination+0x58>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3b01      	subs	r3, #1
 800414e:	4a0a      	ldr	r2, [pc, #40]	@ (8004178 <prvCheckTasksWaitingTermination+0x58>)
 8004150:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004152:	f000 ff03 	bl	8004f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f810 	bl	800417c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <prvCheckTasksWaitingTermination+0x58>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e1      	bne.n	8004128 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000c58 	.word	0x20000c58
 8004174:	20000c84 	.word	0x20000c84
 8004178:	20000c6c 	.word	0x20000c6c

0800417c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800418a:	2b00      	cmp	r3, #0
 800418c:	d108      	bne.n	80041a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	4618      	mov	r0, r3
 8004194:	f001 f8a0 	bl	80052d8 <vPortFree>
				vPortFree( pxTCB );
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f001 f89d 	bl	80052d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800419e:	e019      	b.n	80041d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d103      	bne.n	80041b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f001 f894 	bl	80052d8 <vPortFree>
	}
 80041b0:	e010      	b.n	80041d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d00b      	beq.n	80041d4 <prvDeleteTCB+0x58>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	60fb      	str	r3, [r7, #12]
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <prvDeleteTCB+0x54>
	}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004214 <prvResetNextTaskUnblockTime+0x38>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004218 <prvResetNextTaskUnblockTime+0x3c>)
 80041ee:	f04f 32ff 	mov.w	r2, #4294967295
 80041f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041f4:	e008      	b.n	8004208 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f6:	4b07      	ldr	r3, [pc, #28]	@ (8004214 <prvResetNextTaskUnblockTime+0x38>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a04      	ldr	r2, [pc, #16]	@ (8004218 <prvResetNextTaskUnblockTime+0x3c>)
 8004206:	6013      	str	r3, [r2, #0]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	20000c3c 	.word	0x20000c3c
 8004218:	20000ca4 	.word	0x20000ca4

0800421c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004222:	4b0b      	ldr	r3, [pc, #44]	@ (8004250 <xTaskGetSchedulerState+0x34>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d102      	bne.n	8004230 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800422a:	2301      	movs	r3, #1
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	e008      	b.n	8004242 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004230:	4b08      	ldr	r3, [pc, #32]	@ (8004254 <xTaskGetSchedulerState+0x38>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d102      	bne.n	800423e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004238:	2302      	movs	r3, #2
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	e001      	b.n	8004242 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004242:	687b      	ldr	r3, [r7, #4]
	}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	20000c90 	.word	0x20000c90
 8004254:	20000cac 	.word	0x20000cac

08004258 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d051      	beq.n	8004312 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004272:	4b2a      	ldr	r3, [pc, #168]	@ (800431c <xTaskPriorityInherit+0xc4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	429a      	cmp	r2, r3
 800427a:	d241      	bcs.n	8004300 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	db06      	blt.n	8004292 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004284:	4b25      	ldr	r3, [pc, #148]	@ (800431c <xTaskPriorityInherit+0xc4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6959      	ldr	r1, [r3, #20]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004320 <xTaskPriorityInherit+0xc8>)
 80042a4:	4413      	add	r3, r2
 80042a6:	4299      	cmp	r1, r3
 80042a8:	d122      	bne.n	80042f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fa72 	bl	8002798 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042b4:	4b19      	ldr	r3, [pc, #100]	@ (800431c <xTaskPriorityInherit+0xc4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c2:	4b18      	ldr	r3, [pc, #96]	@ (8004324 <xTaskPriorityInherit+0xcc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d903      	bls.n	80042d2 <xTaskPriorityInherit+0x7a>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	4a15      	ldr	r2, [pc, #84]	@ (8004324 <xTaskPriorityInherit+0xcc>)
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4a10      	ldr	r2, [pc, #64]	@ (8004320 <xTaskPriorityInherit+0xc8>)
 80042e0:	441a      	add	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3304      	adds	r3, #4
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f7fe f9f8 	bl	80026de <vListInsertEnd>
 80042ee:	e004      	b.n	80042fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042f0:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <xTaskPriorityInherit+0xc4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80042fa:	2301      	movs	r3, #1
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e008      	b.n	8004312 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004304:	4b05      	ldr	r3, [pc, #20]	@ (800431c <xTaskPriorityInherit+0xc4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	429a      	cmp	r2, r3
 800430c:	d201      	bcs.n	8004312 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800430e:	2301      	movs	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004312:	68fb      	ldr	r3, [r7, #12]
	}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	200007b0 	.word	0x200007b0
 8004320:	200007b4 	.word	0x200007b4
 8004324:	20000c8c 	.word	0x20000c8c

08004328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d058      	beq.n	80043f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800433e:	4b2f      	ldr	r3, [pc, #188]	@ (80043fc <xTaskPriorityDisinherit+0xd4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	429a      	cmp	r2, r3
 8004346:	d00b      	beq.n	8004360 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	60fb      	str	r3, [r7, #12]
}
 800435a:	bf00      	nop
 800435c:	bf00      	nop
 800435e:	e7fd      	b.n	800435c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	60bb      	str	r3, [r7, #8]
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	e7fd      	b.n	800437c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004384:	1e5a      	subs	r2, r3, #1
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004392:	429a      	cmp	r2, r3
 8004394:	d02c      	beq.n	80043f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439a:	2b00      	cmp	r3, #0
 800439c:	d128      	bne.n	80043f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe f9f8 	bl	8002798 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004400 <xTaskPriorityDisinherit+0xd8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d903      	bls.n	80043d0 <xTaskPriorityDisinherit+0xa8>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004400 <xTaskPriorityDisinherit+0xd8>)
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4a09      	ldr	r2, [pc, #36]	@ (8004404 <xTaskPriorityDisinherit+0xdc>)
 80043de:	441a      	add	r2, r3
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f7fe f979 	bl	80026de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043ec:	2301      	movs	r3, #1
 80043ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043f0:	697b      	ldr	r3, [r7, #20]
	}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	200007b0 	.word	0x200007b0
 8004400:	20000c8c 	.word	0x20000c8c
 8004404:	200007b4 	.word	0x200007b4

08004408 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004416:	2301      	movs	r3, #1
 8004418:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d06c      	beq.n	80044fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	60fb      	str	r3, [r7, #12]
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d902      	bls.n	8004450 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	e002      	b.n	8004456 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004454:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	429a      	cmp	r2, r3
 800445e:	d04c      	beq.n	80044fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	429a      	cmp	r2, r3
 8004468:	d147      	bne.n	80044fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800446a:	4b26      	ldr	r3, [pc, #152]	@ (8004504 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	429a      	cmp	r2, r3
 8004472:	d10b      	bne.n	800448c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	60bb      	str	r3, [r7, #8]
}
 8004486:	bf00      	nop
 8004488:	bf00      	nop
 800448a:	e7fd      	b.n	8004488 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004490:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	db04      	blt.n	80044aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	6959      	ldr	r1, [r3, #20]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4a13      	ldr	r2, [pc, #76]	@ (8004508 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80044ba:	4413      	add	r3, r2
 80044bc:	4299      	cmp	r1, r3
 80044be:	d11c      	bne.n	80044fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe f967 	bl	8002798 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ce:	4b0f      	ldr	r3, [pc, #60]	@ (800450c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d903      	bls.n	80044de <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	4a0c      	ldr	r2, [pc, #48]	@ (800450c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4a07      	ldr	r2, [pc, #28]	@ (8004508 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80044ec:	441a      	add	r2, r3
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f7fe f8f2 	bl	80026de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044fa:	bf00      	nop
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	200007b0 	.word	0x200007b0
 8004508:	200007b4 	.word	0x200007b4
 800450c:	20000c8c 	.word	0x20000c8c

08004510 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004514:	4b07      	ldr	r3, [pc, #28]	@ (8004534 <pvTaskIncrementMutexHeldCount+0x24>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800451c:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <pvTaskIncrementMutexHeldCount+0x24>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004522:	3201      	adds	r2, #1
 8004524:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004526:	4b03      	ldr	r3, [pc, #12]	@ (8004534 <pvTaskIncrementMutexHeldCount+0x24>)
 8004528:	681b      	ldr	r3, [r3, #0]
	}
 800452a:	4618      	mov	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	200007b0 	.word	0x200007b0

08004538 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004542:	4b21      	ldr	r3, [pc, #132]	@ (80045c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004548:	4b20      	ldr	r3, [pc, #128]	@ (80045cc <prvAddCurrentTaskToDelayedList+0x94>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3304      	adds	r3, #4
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe f922 	bl	8002798 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d10a      	bne.n	8004572 <prvAddCurrentTaskToDelayedList+0x3a>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004562:	4b1a      	ldr	r3, [pc, #104]	@ (80045cc <prvAddCurrentTaskToDelayedList+0x94>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3304      	adds	r3, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4819      	ldr	r0, [pc, #100]	@ (80045d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800456c:	f7fe f8b7 	bl	80026de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004570:	e026      	b.n	80045c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4413      	add	r3, r2
 8004578:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800457a:	4b14      	ldr	r3, [pc, #80]	@ (80045cc <prvAddCurrentTaskToDelayedList+0x94>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	429a      	cmp	r2, r3
 8004588:	d209      	bcs.n	800459e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800458a:	4b12      	ldr	r3, [pc, #72]	@ (80045d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b0f      	ldr	r3, [pc, #60]	@ (80045cc <prvAddCurrentTaskToDelayedList+0x94>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7fe f8c5 	bl	8002726 <vListInsert>
}
 800459c:	e010      	b.n	80045c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800459e:	4b0e      	ldr	r3, [pc, #56]	@ (80045d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b0a      	ldr	r3, [pc, #40]	@ (80045cc <prvAddCurrentTaskToDelayedList+0x94>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f7fe f8bb 	bl	8002726 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045b0:	4b0a      	ldr	r3, [pc, #40]	@ (80045dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d202      	bcs.n	80045c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045ba:	4a08      	ldr	r2, [pc, #32]	@ (80045dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	6013      	str	r3, [r2, #0]
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000c88 	.word	0x20000c88
 80045cc:	200007b0 	.word	0x200007b0
 80045d0:	20000c70 	.word	0x20000c70
 80045d4:	20000c40 	.word	0x20000c40
 80045d8:	20000c3c 	.word	0x20000c3c
 80045dc:	20000ca4 	.word	0x20000ca4

080045e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	@ 0x28
 80045e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045ea:	f000 fb13 	bl	8004c14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004664 <xTimerCreateTimerTask+0x84>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d021      	beq.n	800463a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045fe:	1d3a      	adds	r2, r7, #4
 8004600:	f107 0108 	add.w	r1, r7, #8
 8004604:	f107 030c 	add.w	r3, r7, #12
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe f821 	bl	8002650 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	9202      	str	r2, [sp, #8]
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	2302      	movs	r3, #2
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2300      	movs	r3, #0
 800461e:	460a      	mov	r2, r1
 8004620:	4911      	ldr	r1, [pc, #68]	@ (8004668 <xTimerCreateTimerTask+0x88>)
 8004622:	4812      	ldr	r0, [pc, #72]	@ (800466c <xTimerCreateTimerTask+0x8c>)
 8004624:	f7fe ffd0 	bl	80035c8 <xTaskCreateStatic>
 8004628:	4603      	mov	r3, r0
 800462a:	4a11      	ldr	r2, [pc, #68]	@ (8004670 <xTimerCreateTimerTask+0x90>)
 800462c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800462e:	4b10      	ldr	r3, [pc, #64]	@ (8004670 <xTimerCreateTimerTask+0x90>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004636:	2301      	movs	r3, #1
 8004638:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10b      	bne.n	8004658 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	613b      	str	r3, [r7, #16]
}
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004658:	697b      	ldr	r3, [r7, #20]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000ce0 	.word	0x20000ce0
 8004668:	080055d8 	.word	0x080055d8
 800466c:	080047ad 	.word	0x080047ad
 8004670:	20000ce4 	.word	0x20000ce4

08004674 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	@ 0x28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	623b      	str	r3, [r7, #32]
}
 800469e:	bf00      	nop
 80046a0:	bf00      	nop
 80046a2:	e7fd      	b.n	80046a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046a4:	4b19      	ldr	r3, [pc, #100]	@ (800470c <xTimerGenericCommand+0x98>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d02a      	beq.n	8004702 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	dc18      	bgt.n	80046f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046be:	f7ff fdad 	bl	800421c <xTaskGetSchedulerState>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d109      	bne.n	80046dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046c8:	4b10      	ldr	r3, [pc, #64]	@ (800470c <xTimerGenericCommand+0x98>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	f107 0110 	add.w	r1, r7, #16
 80046d0:	2300      	movs	r3, #0
 80046d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046d4:	f7fe f9d0 	bl	8002a78 <xQueueGenericSend>
 80046d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80046da:	e012      	b.n	8004702 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046dc:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <xTimerGenericCommand+0x98>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	f107 0110 	add.w	r1, r7, #16
 80046e4:	2300      	movs	r3, #0
 80046e6:	2200      	movs	r2, #0
 80046e8:	f7fe f9c6 	bl	8002a78 <xQueueGenericSend>
 80046ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80046ee:	e008      	b.n	8004702 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046f0:	4b06      	ldr	r3, [pc, #24]	@ (800470c <xTimerGenericCommand+0x98>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	f107 0110 	add.w	r1, r7, #16
 80046f8:	2300      	movs	r3, #0
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	f7fe fabe 	bl	8002c7c <xQueueGenericSendFromISR>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004704:	4618      	mov	r0, r3
 8004706:	3728      	adds	r7, #40	@ 0x28
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000ce0 	.word	0x20000ce0

08004710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af02      	add	r7, sp, #8
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800471a:	4b23      	ldr	r3, [pc, #140]	@ (80047a8 <prvProcessExpiredTimer+0x98>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	3304      	adds	r3, #4
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe f835 	bl	8002798 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d023      	beq.n	8004784 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	699a      	ldr	r2, [r3, #24]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	18d1      	adds	r1, r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	6978      	ldr	r0, [r7, #20]
 800474a:	f000 f8d5 	bl	80048f8 <prvInsertTimerInActiveList>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d020      	beq.n	8004796 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004754:	2300      	movs	r3, #0
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	2300      	movs	r3, #0
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	2100      	movs	r1, #0
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	f7ff ff88 	bl	8004674 <xTimerGenericCommand>
 8004764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d114      	bne.n	8004796 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60fb      	str	r3, [r7, #12]
}
 800477e:	bf00      	nop
 8004780:	bf00      	nop
 8004782:	e7fd      	b.n	8004780 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800478a:	f023 0301 	bic.w	r3, r3, #1
 800478e:	b2da      	uxtb	r2, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	6978      	ldr	r0, [r7, #20]
 800479c:	4798      	blx	r3
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000cd8 	.word	0x20000cd8

080047ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047b4:	f107 0308 	add.w	r3, r7, #8
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f859 	bl	8004870 <prvGetNextExpireTime>
 80047be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4619      	mov	r1, r3
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f805 	bl	80047d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047ca:	f000 f8d7 	bl	800497c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047ce:	bf00      	nop
 80047d0:	e7f0      	b.n	80047b4 <prvTimerTask+0x8>
	...

080047d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047de:	f7ff f937 	bl	8003a50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047e2:	f107 0308 	add.w	r3, r7, #8
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f866 	bl	80048b8 <prvSampleTimeNow>
 80047ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d130      	bne.n	8004856 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <prvProcessTimerOrBlockTask+0x3c>
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d806      	bhi.n	8004810 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004802:	f7ff f933 	bl	8003a6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff ff81 	bl	8004710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800480e:	e024      	b.n	800485a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004816:	4b13      	ldr	r3, [pc, #76]	@ (8004864 <prvProcessTimerOrBlockTask+0x90>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <prvProcessTimerOrBlockTask+0x50>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <prvProcessTimerOrBlockTask+0x52>
 8004824:	2300      	movs	r3, #0
 8004826:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004828:	4b0f      	ldr	r3, [pc, #60]	@ (8004868 <prvProcessTimerOrBlockTask+0x94>)
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	4619      	mov	r1, r3
 8004836:	f7fe fe93 	bl	8003560 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800483a:	f7ff f917 	bl	8003a6c <xTaskResumeAll>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004844:	4b09      	ldr	r3, [pc, #36]	@ (800486c <prvProcessTimerOrBlockTask+0x98>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	f3bf 8f6f 	isb	sy
}
 8004854:	e001      	b.n	800485a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004856:	f7ff f909 	bl	8003a6c <xTaskResumeAll>
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000cdc 	.word	0x20000cdc
 8004868:	20000ce0 	.word	0x20000ce0
 800486c:	e000ed04 	.word	0xe000ed04

08004870 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004878:	4b0e      	ldr	r3, [pc, #56]	@ (80048b4 <prvGetNextExpireTime+0x44>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <prvGetNextExpireTime+0x16>
 8004882:	2201      	movs	r2, #1
 8004884:	e000      	b.n	8004888 <prvGetNextExpireTime+0x18>
 8004886:	2200      	movs	r2, #0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d105      	bne.n	80048a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004894:	4b07      	ldr	r3, [pc, #28]	@ (80048b4 <prvGetNextExpireTime+0x44>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	e001      	b.n	80048a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048a4:	68fb      	ldr	r3, [r7, #12]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000cd8 	.word	0x20000cd8

080048b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048c0:	f7ff f972 	bl	8003ba8 <xTaskGetTickCount>
 80048c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048c6:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <prvSampleTimeNow+0x3c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d205      	bcs.n	80048dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048d0:	f000 f93a 	bl	8004b48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e002      	b.n	80048e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048e2:	4a04      	ldr	r2, [pc, #16]	@ (80048f4 <prvSampleTimeNow+0x3c>)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048e8:	68fb      	ldr	r3, [r7, #12]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000ce8 	.word	0x20000ce8

080048f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	429a      	cmp	r2, r3
 800491c:	d812      	bhi.n	8004944 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	1ad2      	subs	r2, r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e01b      	b.n	800496a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004932:	4b10      	ldr	r3, [pc, #64]	@ (8004974 <prvInsertTimerInActiveList+0x7c>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3304      	adds	r3, #4
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f7fd fef2 	bl	8002726 <vListInsert>
 8004942:	e012      	b.n	800496a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d206      	bcs.n	800495a <prvInsertTimerInActiveList+0x62>
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e007      	b.n	800496a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800495a:	4b07      	ldr	r3, [pc, #28]	@ (8004978 <prvInsertTimerInActiveList+0x80>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3304      	adds	r3, #4
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f7fd fede 	bl	8002726 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800496a:	697b      	ldr	r3, [r7, #20]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000cdc 	.word	0x20000cdc
 8004978:	20000cd8 	.word	0x20000cd8

0800497c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08e      	sub	sp, #56	@ 0x38
 8004980:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004982:	e0ce      	b.n	8004b22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	da19      	bge.n	80049be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800498a:	1d3b      	adds	r3, r7, #4
 800498c:	3304      	adds	r3, #4
 800498e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	61fb      	str	r3, [r7, #28]
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	e7fd      	b.n	80049aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049b4:	6850      	ldr	r0, [r2, #4]
 80049b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049b8:	6892      	ldr	r2, [r2, #8]
 80049ba:	4611      	mov	r1, r2
 80049bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f2c0 80ae 	blt.w	8004b22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d004      	beq.n	80049dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d4:	3304      	adds	r3, #4
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fd fede 	bl	8002798 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049dc:	463b      	mov	r3, r7
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff ff6a 	bl	80048b8 <prvSampleTimeNow>
 80049e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b09      	cmp	r3, #9
 80049ea:	f200 8097 	bhi.w	8004b1c <prvProcessReceivedCommands+0x1a0>
 80049ee:	a201      	add	r2, pc, #4	@ (adr r2, 80049f4 <prvProcessReceivedCommands+0x78>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a1d 	.word	0x08004a1d
 80049f8:	08004a1d 	.word	0x08004a1d
 80049fc:	08004a1d 	.word	0x08004a1d
 8004a00:	08004a93 	.word	0x08004a93
 8004a04:	08004aa7 	.word	0x08004aa7
 8004a08:	08004af3 	.word	0x08004af3
 8004a0c:	08004a1d 	.word	0x08004a1d
 8004a10:	08004a1d 	.word	0x08004a1d
 8004a14:	08004a93 	.word	0x08004a93
 8004a18:	08004aa7 	.word	0x08004aa7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a22:	f043 0301 	orr.w	r3, r3, #1
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	18d1      	adds	r1, r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a3c:	f7ff ff5c 	bl	80048f8 <prvInsertTimerInActiveList>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d06c      	beq.n	8004b20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d061      	beq.n	8004b20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	441a      	add	r2, r3
 8004a64:	2300      	movs	r3, #0
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a6e:	f7ff fe01 	bl	8004674 <xTimerGenericCommand>
 8004a72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d152      	bne.n	8004b20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	61bb      	str	r3, [r7, #24]
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004aa4:	e03d      	b.n	8004b22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	617b      	str	r3, [r7, #20]
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	e7fd      	b.n	8004ada <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	18d1      	adds	r1, r2, r3
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aec:	f7ff ff04 	bl	80048f8 <prvInsertTimerInActiveList>
					break;
 8004af0:	e017      	b.n	8004b22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d103      	bne.n	8004b08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004b00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b02:	f000 fbe9 	bl	80052d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b06:	e00c      	b.n	8004b22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004b1a:	e002      	b.n	8004b22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004b1c:	bf00      	nop
 8004b1e:	e000      	b.n	8004b22 <prvProcessReceivedCommands+0x1a6>
					break;
 8004b20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b22:	4b08      	ldr	r3, [pc, #32]	@ (8004b44 <prvProcessReceivedCommands+0x1c8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	1d39      	adds	r1, r7, #4
 8004b28:	2200      	movs	r2, #0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe f9d4 	bl	8002ed8 <xQueueReceive>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f47f af26 	bne.w	8004984 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	3730      	adds	r7, #48	@ 0x30
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000ce0 	.word	0x20000ce0

08004b48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b4e:	e049      	b.n	8004be4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b50:	4b2e      	ldr	r3, [pc, #184]	@ (8004c0c <prvSwitchTimerLists+0xc4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8004c0c <prvSwitchTimerLists+0xc4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fd fe15 	bl	8002798 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d02f      	beq.n	8004be4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d90e      	bls.n	8004bb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c0c <prvSwitchTimerLists+0xc4>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	4619      	mov	r1, r3
 8004bac:	4610      	mov	r0, r2
 8004bae:	f7fd fdba 	bl	8002726 <vListInsert>
 8004bb2:	e017      	b.n	8004be4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f7ff fd58 	bl	8004674 <xTimerGenericCommand>
 8004bc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	603b      	str	r3, [r7, #0]
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	e7fd      	b.n	8004be0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004be4:	4b09      	ldr	r3, [pc, #36]	@ (8004c0c <prvSwitchTimerLists+0xc4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1b0      	bne.n	8004b50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bee:	4b07      	ldr	r3, [pc, #28]	@ (8004c0c <prvSwitchTimerLists+0xc4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bf4:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <prvSwitchTimerLists+0xc8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a04      	ldr	r2, [pc, #16]	@ (8004c0c <prvSwitchTimerLists+0xc4>)
 8004bfa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004bfc:	4a04      	ldr	r2, [pc, #16]	@ (8004c10 <prvSwitchTimerLists+0xc8>)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	6013      	str	r3, [r2, #0]
}
 8004c02:	bf00      	nop
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000cd8 	.word	0x20000cd8
 8004c10:	20000cdc 	.word	0x20000cdc

08004c14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c1a:	f000 f96d 	bl	8004ef8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c1e:	4b15      	ldr	r3, [pc, #84]	@ (8004c74 <prvCheckForValidListAndQueue+0x60>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d120      	bne.n	8004c68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c26:	4814      	ldr	r0, [pc, #80]	@ (8004c78 <prvCheckForValidListAndQueue+0x64>)
 8004c28:	f7fd fd2c 	bl	8002684 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c2c:	4813      	ldr	r0, [pc, #76]	@ (8004c7c <prvCheckForValidListAndQueue+0x68>)
 8004c2e:	f7fd fd29 	bl	8002684 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c32:	4b13      	ldr	r3, [pc, #76]	@ (8004c80 <prvCheckForValidListAndQueue+0x6c>)
 8004c34:	4a10      	ldr	r2, [pc, #64]	@ (8004c78 <prvCheckForValidListAndQueue+0x64>)
 8004c36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c38:	4b12      	ldr	r3, [pc, #72]	@ (8004c84 <prvCheckForValidListAndQueue+0x70>)
 8004c3a:	4a10      	ldr	r2, [pc, #64]	@ (8004c7c <prvCheckForValidListAndQueue+0x68>)
 8004c3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <prvCheckForValidListAndQueue+0x74>)
 8004c44:	4a11      	ldr	r2, [pc, #68]	@ (8004c8c <prvCheckForValidListAndQueue+0x78>)
 8004c46:	2110      	movs	r1, #16
 8004c48:	200a      	movs	r0, #10
 8004c4a:	f7fd fe39 	bl	80028c0 <xQueueGenericCreateStatic>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4a08      	ldr	r2, [pc, #32]	@ (8004c74 <prvCheckForValidListAndQueue+0x60>)
 8004c52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c54:	4b07      	ldr	r3, [pc, #28]	@ (8004c74 <prvCheckForValidListAndQueue+0x60>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c5c:	4b05      	ldr	r3, [pc, #20]	@ (8004c74 <prvCheckForValidListAndQueue+0x60>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	490b      	ldr	r1, [pc, #44]	@ (8004c90 <prvCheckForValidListAndQueue+0x7c>)
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe fc52 	bl	800350c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c68:	f000 f978 	bl	8004f5c <vPortExitCritical>
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000ce0 	.word	0x20000ce0
 8004c78:	20000cb0 	.word	0x20000cb0
 8004c7c:	20000cc4 	.word	0x20000cc4
 8004c80:	20000cd8 	.word	0x20000cd8
 8004c84:	20000cdc 	.word	0x20000cdc
 8004c88:	20000d8c 	.word	0x20000d8c
 8004c8c:	20000cec 	.word	0x20000cec
 8004c90:	080055e0 	.word	0x080055e0

08004c94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3b04      	subs	r3, #4
 8004ca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3b04      	subs	r3, #4
 8004cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f023 0201 	bic.w	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3b04      	subs	r3, #4
 8004cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf8 <pxPortInitialiseStack+0x64>)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3b14      	subs	r3, #20
 8004cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3b04      	subs	r3, #4
 8004cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f06f 0202 	mvn.w	r2, #2
 8004ce2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3b20      	subs	r3, #32
 8004ce8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cea:	68fb      	ldr	r3, [r7, #12]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	08004cfd 	.word	0x08004cfd

08004cfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d06:	4b13      	ldr	r3, [pc, #76]	@ (8004d54 <prvTaskExitError+0x58>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d00b      	beq.n	8004d28 <prvTaskExitError+0x2c>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	60fb      	str	r3, [r7, #12]
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <prvTaskExitError+0x28>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	60bb      	str	r3, [r7, #8]
}
 8004d3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d3c:	bf00      	nop
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0fc      	beq.n	8004d3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000014 	.word	0x20000014
	...

08004d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d60:	4b07      	ldr	r3, [pc, #28]	@ (8004d80 <pxCurrentTCBConst2>)
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	6808      	ldr	r0, [r1, #0]
 8004d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6a:	f380 8809 	msr	PSP, r0
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8811 	msr	BASEPRI, r0
 8004d7a:	4770      	bx	lr
 8004d7c:	f3af 8000 	nop.w

08004d80 <pxCurrentTCBConst2>:
 8004d80:	200007b0 	.word	0x200007b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop

08004d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d88:	4808      	ldr	r0, [pc, #32]	@ (8004dac <prvPortStartFirstTask+0x24>)
 8004d8a:	6800      	ldr	r0, [r0, #0]
 8004d8c:	6800      	ldr	r0, [r0, #0]
 8004d8e:	f380 8808 	msr	MSP, r0
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f380 8814 	msr	CONTROL, r0
 8004d9a:	b662      	cpsie	i
 8004d9c:	b661      	cpsie	f
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	df00      	svc	0
 8004da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004daa:	bf00      	nop
 8004dac:	e000ed08 	.word	0xe000ed08

08004db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004db6:	4b47      	ldr	r3, [pc, #284]	@ (8004ed4 <xPortStartScheduler+0x124>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a47      	ldr	r2, [pc, #284]	@ (8004ed8 <xPortStartScheduler+0x128>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10b      	bne.n	8004dd8 <xPortStartScheduler+0x28>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	60fb      	str	r3, [r7, #12]
}
 8004dd2:	bf00      	nop
 8004dd4:	bf00      	nop
 8004dd6:	e7fd      	b.n	8004dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ed4 <xPortStartScheduler+0x124>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a3f      	ldr	r2, [pc, #252]	@ (8004edc <xPortStartScheduler+0x12c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d10b      	bne.n	8004dfa <xPortStartScheduler+0x4a>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	613b      	str	r3, [r7, #16]
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	e7fd      	b.n	8004df6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dfa:	4b39      	ldr	r3, [pc, #228]	@ (8004ee0 <xPortStartScheduler+0x130>)
 8004dfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	22ff      	movs	r2, #255	@ 0xff
 8004e0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	4b31      	ldr	r3, [pc, #196]	@ (8004ee4 <xPortStartScheduler+0x134>)
 8004e20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e22:	4b31      	ldr	r3, [pc, #196]	@ (8004ee8 <xPortStartScheduler+0x138>)
 8004e24:	2207      	movs	r2, #7
 8004e26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e28:	e009      	b.n	8004e3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ee8 <xPortStartScheduler+0x138>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee8 <xPortStartScheduler+0x138>)
 8004e32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e46:	2b80      	cmp	r3, #128	@ 0x80
 8004e48:	d0ef      	beq.n	8004e2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e4a:	4b27      	ldr	r3, [pc, #156]	@ (8004ee8 <xPortStartScheduler+0x138>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1c3 0307 	rsb	r3, r3, #7
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d00b      	beq.n	8004e6e <xPortStartScheduler+0xbe>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	60bb      	str	r3, [r7, #8]
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	e7fd      	b.n	8004e6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee8 <xPortStartScheduler+0x138>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee8 <xPortStartScheduler+0x138>)
 8004e76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e78:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee8 <xPortStartScheduler+0x138>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e80:	4a19      	ldr	r2, [pc, #100]	@ (8004ee8 <xPortStartScheduler+0x138>)
 8004e82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e8c:	4b17      	ldr	r3, [pc, #92]	@ (8004eec <xPortStartScheduler+0x13c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a16      	ldr	r2, [pc, #88]	@ (8004eec <xPortStartScheduler+0x13c>)
 8004e92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e98:	4b14      	ldr	r3, [pc, #80]	@ (8004eec <xPortStartScheduler+0x13c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a13      	ldr	r2, [pc, #76]	@ (8004eec <xPortStartScheduler+0x13c>)
 8004e9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004ea2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ea4:	f000 f8da 	bl	800505c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ea8:	4b11      	ldr	r3, [pc, #68]	@ (8004ef0 <xPortStartScheduler+0x140>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004eae:	f000 f8f9 	bl	80050a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004eb2:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <xPortStartScheduler+0x144>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8004ef4 <xPortStartScheduler+0x144>)
 8004eb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004ebc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ebe:	f7ff ff63 	bl	8004d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ec2:	f7fe ff3b 	bl	8003d3c <vTaskSwitchContext>
	prvTaskExitError();
 8004ec6:	f7ff ff19 	bl	8004cfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	e000ed00 	.word	0xe000ed00
 8004ed8:	410fc271 	.word	0x410fc271
 8004edc:	410fc270 	.word	0x410fc270
 8004ee0:	e000e400 	.word	0xe000e400
 8004ee4:	20000ddc 	.word	0x20000ddc
 8004ee8:	20000de0 	.word	0x20000de0
 8004eec:	e000ed20 	.word	0xe000ed20
 8004ef0:	20000014 	.word	0x20000014
 8004ef4:	e000ef34 	.word	0xe000ef34

08004ef8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f12:	4b10      	ldr	r3, [pc, #64]	@ (8004f54 <vPortEnterCritical+0x5c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3301      	adds	r3, #1
 8004f18:	4a0e      	ldr	r2, [pc, #56]	@ (8004f54 <vPortEnterCritical+0x5c>)
 8004f1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f54 <vPortEnterCritical+0x5c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d110      	bne.n	8004f46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f24:	4b0c      	ldr	r3, [pc, #48]	@ (8004f58 <vPortEnterCritical+0x60>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00b      	beq.n	8004f46 <vPortEnterCritical+0x4e>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	603b      	str	r3, [r7, #0]
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	e7fd      	b.n	8004f42 <vPortEnterCritical+0x4a>
	}
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000014 	.word	0x20000014
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f62:	4b12      	ldr	r3, [pc, #72]	@ (8004fac <vPortExitCritical+0x50>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10b      	bne.n	8004f82 <vPortExitCritical+0x26>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	607b      	str	r3, [r7, #4]
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	e7fd      	b.n	8004f7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f82:	4b0a      	ldr	r3, [pc, #40]	@ (8004fac <vPortExitCritical+0x50>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	4a08      	ldr	r2, [pc, #32]	@ (8004fac <vPortExitCritical+0x50>)
 8004f8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f8c:	4b07      	ldr	r3, [pc, #28]	@ (8004fac <vPortExitCritical+0x50>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d105      	bne.n	8004fa0 <vPortExitCritical+0x44>
 8004f94:	2300      	movs	r3, #0
 8004f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f383 8811 	msr	BASEPRI, r3
}
 8004f9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	20000014 	.word	0x20000014

08004fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fb0:	f3ef 8009 	mrs	r0, PSP
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	4b15      	ldr	r3, [pc, #84]	@ (8005010 <pxCurrentTCBConst>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	f01e 0f10 	tst.w	lr, #16
 8004fc0:	bf08      	it	eq
 8004fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	6010      	str	r0, [r2, #0]
 8004fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004fd4:	f380 8811 	msr	BASEPRI, r0
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f7fe feac 	bl	8003d3c <vTaskSwitchContext>
 8004fe4:	f04f 0000 	mov.w	r0, #0
 8004fe8:	f380 8811 	msr	BASEPRI, r0
 8004fec:	bc09      	pop	{r0, r3}
 8004fee:	6819      	ldr	r1, [r3, #0]
 8004ff0:	6808      	ldr	r0, [r1, #0]
 8004ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff6:	f01e 0f10 	tst.w	lr, #16
 8004ffa:	bf08      	it	eq
 8004ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005000:	f380 8809 	msr	PSP, r0
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	f3af 8000 	nop.w

08005010 <pxCurrentTCBConst>:
 8005010:	200007b0 	.word	0x200007b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop

08005018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	607b      	str	r3, [r7, #4]
}
 8005030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005032:	f7fe fdc9 	bl	8003bc8 <xTaskIncrementTick>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800503c:	4b06      	ldr	r3, [pc, #24]	@ (8005058 <xPortSysTickHandler+0x40>)
 800503e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f383 8811 	msr	BASEPRI, r3
}
 800504e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005066:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <vPortSetupTimerInterrupt+0x38>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800506c:	4b0a      	ldr	r3, [pc, #40]	@ (8005098 <vPortSetupTimerInterrupt+0x3c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0a      	ldr	r2, [pc, #40]	@ (800509c <vPortSetupTimerInterrupt+0x40>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	4a09      	ldr	r2, [pc, #36]	@ (80050a0 <vPortSetupTimerInterrupt+0x44>)
 800507a:	3b01      	subs	r3, #1
 800507c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800507e:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005080:	2207      	movs	r2, #7
 8005082:	601a      	str	r2, [r3, #0]
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	e000e010 	.word	0xe000e010
 8005094:	e000e018 	.word	0xe000e018
 8005098:	20000008 	.word	0x20000008
 800509c:	10624dd3 	.word	0x10624dd3
 80050a0:	e000e014 	.word	0xe000e014

080050a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80050b4 <vPortEnableVFP+0x10>
 80050a8:	6801      	ldr	r1, [r0, #0]
 80050aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80050ae:	6001      	str	r1, [r0, #0]
 80050b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050b2:	bf00      	nop
 80050b4:	e000ed88 	.word	0xe000ed88

080050b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050be:	f3ef 8305 	mrs	r3, IPSR
 80050c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	d915      	bls.n	80050f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050ca:	4a18      	ldr	r2, [pc, #96]	@ (800512c <vPortValidateInterruptPriority+0x74>)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050d4:	4b16      	ldr	r3, [pc, #88]	@ (8005130 <vPortValidateInterruptPriority+0x78>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	7afa      	ldrb	r2, [r7, #11]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d20b      	bcs.n	80050f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	607b      	str	r3, [r7, #4]
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	e7fd      	b.n	80050f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005134 <vPortValidateInterruptPriority+0x7c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005138 <vPortValidateInterruptPriority+0x80>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d90b      	bls.n	800511e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	603b      	str	r3, [r7, #0]
}
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	e7fd      	b.n	800511a <vPortValidateInterruptPriority+0x62>
	}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	e000e3f0 	.word	0xe000e3f0
 8005130:	20000ddc 	.word	0x20000ddc
 8005134:	e000ed0c 	.word	0xe000ed0c
 8005138:	20000de0 	.word	0x20000de0

0800513c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	@ 0x28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005148:	f7fe fc82 	bl	8003a50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800514c:	4b5c      	ldr	r3, [pc, #368]	@ (80052c0 <pvPortMalloc+0x184>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005154:	f000 f924 	bl	80053a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005158:	4b5a      	ldr	r3, [pc, #360]	@ (80052c4 <pvPortMalloc+0x188>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	f040 8095 	bne.w	8005290 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01e      	beq.n	80051aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800516c:	2208      	movs	r2, #8
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4413      	add	r3, r2
 8005172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	2b00      	cmp	r3, #0
 800517c:	d015      	beq.n	80051aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f023 0307 	bic.w	r3, r3, #7
 8005184:	3308      	adds	r3, #8
 8005186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00b      	beq.n	80051aa <pvPortMalloc+0x6e>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	617b      	str	r3, [r7, #20]
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	e7fd      	b.n	80051a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d06f      	beq.n	8005290 <pvPortMalloc+0x154>
 80051b0:	4b45      	ldr	r3, [pc, #276]	@ (80052c8 <pvPortMalloc+0x18c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d86a      	bhi.n	8005290 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051ba:	4b44      	ldr	r3, [pc, #272]	@ (80052cc <pvPortMalloc+0x190>)
 80051bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051be:	4b43      	ldr	r3, [pc, #268]	@ (80052cc <pvPortMalloc+0x190>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051c4:	e004      	b.n	80051d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d903      	bls.n	80051e2 <pvPortMalloc+0xa6>
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f1      	bne.n	80051c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051e2:	4b37      	ldr	r3, [pc, #220]	@ (80052c0 <pvPortMalloc+0x184>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d051      	beq.n	8005290 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2208      	movs	r2, #8
 80051f2:	4413      	add	r3, r2
 80051f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	1ad2      	subs	r2, r2, r3
 8005206:	2308      	movs	r3, #8
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	429a      	cmp	r2, r3
 800520c:	d920      	bls.n	8005250 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800520e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4413      	add	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <pvPortMalloc+0xfc>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	613b      	str	r3, [r7, #16]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	1ad2      	subs	r2, r2, r3
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800524a:	69b8      	ldr	r0, [r7, #24]
 800524c:	f000 f90a 	bl	8005464 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005250:	4b1d      	ldr	r3, [pc, #116]	@ (80052c8 <pvPortMalloc+0x18c>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	4a1b      	ldr	r2, [pc, #108]	@ (80052c8 <pvPortMalloc+0x18c>)
 800525c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800525e:	4b1a      	ldr	r3, [pc, #104]	@ (80052c8 <pvPortMalloc+0x18c>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b1b      	ldr	r3, [pc, #108]	@ (80052d0 <pvPortMalloc+0x194>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d203      	bcs.n	8005272 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800526a:	4b17      	ldr	r3, [pc, #92]	@ (80052c8 <pvPortMalloc+0x18c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a18      	ldr	r2, [pc, #96]	@ (80052d0 <pvPortMalloc+0x194>)
 8005270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	4b13      	ldr	r3, [pc, #76]	@ (80052c4 <pvPortMalloc+0x188>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	431a      	orrs	r2, r3
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005286:	4b13      	ldr	r3, [pc, #76]	@ (80052d4 <pvPortMalloc+0x198>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3301      	adds	r3, #1
 800528c:	4a11      	ldr	r2, [pc, #68]	@ (80052d4 <pvPortMalloc+0x198>)
 800528e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005290:	f7fe fbec 	bl	8003a6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <pvPortMalloc+0x17a>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	60fb      	str	r3, [r7, #12]
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	e7fd      	b.n	80052b2 <pvPortMalloc+0x176>
	return pvReturn;
 80052b6:	69fb      	ldr	r3, [r7, #28]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3728      	adds	r7, #40	@ 0x28
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	200019a4 	.word	0x200019a4
 80052c4:	200019b8 	.word	0x200019b8
 80052c8:	200019a8 	.word	0x200019a8
 80052cc:	2000199c 	.word	0x2000199c
 80052d0:	200019ac 	.word	0x200019ac
 80052d4:	200019b0 	.word	0x200019b0

080052d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d04f      	beq.n	800538a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052ea:	2308      	movs	r3, #8
 80052ec:	425b      	negs	r3, r3
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4413      	add	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	4b25      	ldr	r3, [pc, #148]	@ (8005394 <vPortFree+0xbc>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4013      	ands	r3, r2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10b      	bne.n	800531e <vPortFree+0x46>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	60fb      	str	r3, [r7, #12]
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	e7fd      	b.n	800531a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <vPortFree+0x66>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	60bb      	str	r3, [r7, #8]
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	e7fd      	b.n	800533a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	4b14      	ldr	r3, [pc, #80]	@ (8005394 <vPortFree+0xbc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01e      	beq.n	800538a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d11a      	bne.n	800538a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	4b0e      	ldr	r3, [pc, #56]	@ (8005394 <vPortFree+0xbc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	43db      	mvns	r3, r3
 800535e:	401a      	ands	r2, r3
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005364:	f7fe fb74 	bl	8003a50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <vPortFree+0xc0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4413      	add	r3, r2
 8005372:	4a09      	ldr	r2, [pc, #36]	@ (8005398 <vPortFree+0xc0>)
 8005374:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005376:	6938      	ldr	r0, [r7, #16]
 8005378:	f000 f874 	bl	8005464 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800537c:	4b07      	ldr	r3, [pc, #28]	@ (800539c <vPortFree+0xc4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	4a06      	ldr	r2, [pc, #24]	@ (800539c <vPortFree+0xc4>)
 8005384:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005386:	f7fe fb71 	bl	8003a6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800538a:	bf00      	nop
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	200019b8 	.word	0x200019b8
 8005398:	200019a8 	.word	0x200019a8
 800539c:	200019b4 	.word	0x200019b4

080053a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053a6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80053aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053ac:	4b27      	ldr	r3, [pc, #156]	@ (800544c <prvHeapInit+0xac>)
 80053ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00c      	beq.n	80053d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3307      	adds	r3, #7
 80053be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0307 	bic.w	r3, r3, #7
 80053c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	4a1f      	ldr	r2, [pc, #124]	@ (800544c <prvHeapInit+0xac>)
 80053d0:	4413      	add	r3, r2
 80053d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <prvHeapInit+0xb0>)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053de:	4b1c      	ldr	r3, [pc, #112]	@ (8005450 <prvHeapInit+0xb0>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	4413      	add	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053ec:	2208      	movs	r2, #8
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0307 	bic.w	r3, r3, #7
 80053fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4a15      	ldr	r2, [pc, #84]	@ (8005454 <prvHeapInit+0xb4>)
 8005400:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005402:	4b14      	ldr	r3, [pc, #80]	@ (8005454 <prvHeapInit+0xb4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2200      	movs	r2, #0
 8005408:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800540a:	4b12      	ldr	r3, [pc, #72]	@ (8005454 <prvHeapInit+0xb4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	1ad2      	subs	r2, r2, r3
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005420:	4b0c      	ldr	r3, [pc, #48]	@ (8005454 <prvHeapInit+0xb4>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4a0a      	ldr	r2, [pc, #40]	@ (8005458 <prvHeapInit+0xb8>)
 800542e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	4a09      	ldr	r2, [pc, #36]	@ (800545c <prvHeapInit+0xbc>)
 8005436:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005438:	4b09      	ldr	r3, [pc, #36]	@ (8005460 <prvHeapInit+0xc0>)
 800543a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800543e:	601a      	str	r2, [r3, #0]
}
 8005440:	bf00      	nop
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	20000de4 	.word	0x20000de4
 8005450:	2000199c 	.word	0x2000199c
 8005454:	200019a4 	.word	0x200019a4
 8005458:	200019ac 	.word	0x200019ac
 800545c:	200019a8 	.word	0x200019a8
 8005460:	200019b8 	.word	0x200019b8

08005464 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800546c:	4b28      	ldr	r3, [pc, #160]	@ (8005510 <prvInsertBlockIntoFreeList+0xac>)
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e002      	b.n	8005478 <prvInsertBlockIntoFreeList+0x14>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	429a      	cmp	r2, r3
 8005480:	d8f7      	bhi.n	8005472 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	4413      	add	r3, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d108      	bne.n	80054a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	441a      	add	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	441a      	add	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d118      	bne.n	80054ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b15      	ldr	r3, [pc, #84]	@ (8005514 <prvInsertBlockIntoFreeList+0xb0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d00d      	beq.n	80054e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	441a      	add	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e008      	b.n	80054f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005514 <prvInsertBlockIntoFreeList+0xb0>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	e003      	b.n	80054f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d002      	beq.n	8005502 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	2000199c 	.word	0x2000199c
 8005514:	200019a4 	.word	0x200019a4

08005518 <memset>:
 8005518:	4402      	add	r2, r0
 800551a:	4603      	mov	r3, r0
 800551c:	4293      	cmp	r3, r2
 800551e:	d100      	bne.n	8005522 <memset+0xa>
 8005520:	4770      	bx	lr
 8005522:	f803 1b01 	strb.w	r1, [r3], #1
 8005526:	e7f9      	b.n	800551c <memset+0x4>

08005528 <__libc_init_array>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4d0d      	ldr	r5, [pc, #52]	@ (8005560 <__libc_init_array+0x38>)
 800552c:	4c0d      	ldr	r4, [pc, #52]	@ (8005564 <__libc_init_array+0x3c>)
 800552e:	1b64      	subs	r4, r4, r5
 8005530:	10a4      	asrs	r4, r4, #2
 8005532:	2600      	movs	r6, #0
 8005534:	42a6      	cmp	r6, r4
 8005536:	d109      	bne.n	800554c <__libc_init_array+0x24>
 8005538:	4d0b      	ldr	r5, [pc, #44]	@ (8005568 <__libc_init_array+0x40>)
 800553a:	4c0c      	ldr	r4, [pc, #48]	@ (800556c <__libc_init_array+0x44>)
 800553c:	f000 f826 	bl	800558c <_init>
 8005540:	1b64      	subs	r4, r4, r5
 8005542:	10a4      	asrs	r4, r4, #2
 8005544:	2600      	movs	r6, #0
 8005546:	42a6      	cmp	r6, r4
 8005548:	d105      	bne.n	8005556 <__libc_init_array+0x2e>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005550:	4798      	blx	r3
 8005552:	3601      	adds	r6, #1
 8005554:	e7ee      	b.n	8005534 <__libc_init_array+0xc>
 8005556:	f855 3b04 	ldr.w	r3, [r5], #4
 800555a:	4798      	blx	r3
 800555c:	3601      	adds	r6, #1
 800555e:	e7f2      	b.n	8005546 <__libc_init_array+0x1e>
 8005560:	08005680 	.word	0x08005680
 8005564:	08005680 	.word	0x08005680
 8005568:	08005680 	.word	0x08005680
 800556c:	08005684 	.word	0x08005684

08005570 <memcpy>:
 8005570:	440a      	add	r2, r1
 8005572:	4291      	cmp	r1, r2
 8005574:	f100 33ff 	add.w	r3, r0, #4294967295
 8005578:	d100      	bne.n	800557c <memcpy+0xc>
 800557a:	4770      	bx	lr
 800557c:	b510      	push	{r4, lr}
 800557e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005582:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005586:	4291      	cmp	r1, r2
 8005588:	d1f9      	bne.n	800557e <memcpy+0xe>
 800558a:	bd10      	pop	{r4, pc}

0800558c <_init>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr

08005598 <_fini>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	bf00      	nop
 800559c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559e:	bc08      	pop	{r3}
 80055a0:	469e      	mov	lr, r3
 80055a2:	4770      	bx	lr
